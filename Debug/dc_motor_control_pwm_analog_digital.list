
dc_motor_control_pwm_analog_digital.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004544  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800470c  0800470c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800470c  0800470c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800470c  0800470c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800470c  0800470c  0001470c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004710  08004710  00014710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000100  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000110  20000110  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f811  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f2d  00000000  00000000  0002f851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  00031780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c00  00000000  00000000  00032438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aa93  00000000  00000000  00033038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fb6b  00000000  00000000  0004dacb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a09f3  00000000  00000000  0005d636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000fe029  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003590  00000000  00000000  000fe07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080046b4 	.word	0x080046b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080046b4 	.word	0x080046b4

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb36 	bl	800083c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f846 	bl	8000260 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f93c 	bl	8000450 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001d8:	f000 f894 	bl	8000304 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80001dc:	f000 f908 	bl	80003f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Transmit_IT(&huart1, "deneme_verisi", sizeof("deneme_verisi"));
  HAL_UART_Receive_IT(&huart1, &rData, 1);
 80001e0:	2201      	movs	r2, #1
 80001e2:	491a      	ldr	r1, [pc, #104]	; (800024c <main+0x84>)
 80001e4:	481a      	ldr	r0, [pc, #104]	; (8000250 <main+0x88>)
 80001e6:	f003 f939 	bl	800345c <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80001ea:	2100      	movs	r1, #0
 80001ec:	4819      	ldr	r0, [pc, #100]	; (8000254 <main+0x8c>)
 80001ee:	f002 f9d1 	bl	8002594 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2110      	movs	r1, #16
 80001f6:	4818      	ldr	r0, [pc, #96]	; (8000258 <main+0x90>)
 80001f8:	f000 fe98 	bl	8000f2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	2120      	movs	r1, #32
 8000200:	4815      	ldr	r0, [pc, #84]	; (8000258 <main+0x90>)
 8000202:	f000 fe93 	bl	8000f2c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
	  if ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2) == 1) || (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_7) == 1) )
 8000206:	2104      	movs	r1, #4
 8000208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800020c:	f000 fe76 	bl	8000efc <HAL_GPIO_ReadPin>
 8000210:	4603      	mov	r3, r0
 8000212:	2b01      	cmp	r3, #1
 8000214:	d007      	beq.n	8000226 <main+0x5e>
 8000216:	2180      	movs	r1, #128	; 0x80
 8000218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021c:	f000 fe6e 	bl	8000efc <HAL_GPIO_ReadPin>
 8000220:	4603      	mov	r3, r0
 8000222:	2b01      	cmp	r3, #1
 8000224:	d108      	bne.n	8000238 <main+0x70>
	  {
		  pulseWidth = 0;
 8000226:	4b0d      	ldr	r3, [pc, #52]	; (800025c <main+0x94>)
 8000228:	2200      	movs	r2, #0
 800022a:	801a      	strh	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulseWidth);
 800022c:	4b0b      	ldr	r3, [pc, #44]	; (800025c <main+0x94>)
 800022e:	881a      	ldrh	r2, [r3, #0]
 8000230:	4b08      	ldr	r3, [pc, #32]	; (8000254 <main+0x8c>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	635a      	str	r2, [r3, #52]	; 0x34
 8000236:	e007      	b.n	8000248 <main+0x80>
	  }
	  else
	  {
		  pulseWidth = 90;
 8000238:	4b08      	ldr	r3, [pc, #32]	; (800025c <main+0x94>)
 800023a:	225a      	movs	r2, #90	; 0x5a
 800023c:	801a      	strh	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulseWidth);
 800023e:	4b07      	ldr	r3, [pc, #28]	; (800025c <main+0x94>)
 8000240:	881a      	ldrh	r2, [r3, #0]
 8000242:	4b04      	ldr	r3, [pc, #16]	; (8000254 <main+0x8c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	635a      	str	r2, [r3, #52]	; 0x34
	  if ((HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2) == 1) || (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_7) == 1) )
 8000248:	e7dd      	b.n	8000206 <main+0x3e>
 800024a:	bf00      	nop
 800024c:	200000b4 	.word	0x200000b4
 8000250:	20000030 	.word	0x20000030
 8000254:	200000b8 	.word	0x200000b8
 8000258:	48000400 	.word	0x48000400
 800025c:	20000000 	.word	0x20000000

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b096      	sub	sp, #88	; 0x58
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800026a:	2228      	movs	r2, #40	; 0x28
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f004 fa00 	bl	8004674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000274:	f107 031c 	add.w	r3, r7, #28
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]
 8000282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]
 8000290:	611a      	str	r2, [r3, #16]
 8000292:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000294:	2302      	movs	r3, #2
 8000296:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000298:	2301      	movs	r3, #1
 800029a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029c:	2310      	movs	r3, #16
 800029e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a0:	2300      	movs	r3, #0
 80002a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 fe57 	bl	8000f5c <HAL_RCC_OscConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002b4:	f000 f988 	bl	80005c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b8:	230f      	movs	r3, #15
 80002ba:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002bc:	2300      	movs	r3, #0
 80002be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002cc:	f107 031c 	add.w	r3, r7, #28
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 fd4a 	bl	8001d6c <HAL_RCC_ClockConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002de:	f000 f973 	bl	80005c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002e2:	2301      	movs	r3, #1
 80002e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f001 ff73 	bl	80021d8 <HAL_RCCEx_PeriphCLKConfig>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002f8:	f000 f966 	bl	80005c8 <Error_Handler>
  }
}
 80002fc:	bf00      	nop
 80002fe:	3758      	adds	r7, #88	; 0x58
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b08e      	sub	sp, #56	; 0x38
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800030a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000318:	f107 031c 	add.w	r3, r7, #28
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000324:	463b      	mov	r3, r7
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
 8000330:	611a      	str	r2, [r3, #16]
 8000332:	615a      	str	r2, [r3, #20]
 8000334:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000336:	4b2d      	ldr	r3, [pc, #180]	; (80003ec <MX_TIM2_Init+0xe8>)
 8000338:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800033c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800033e:	4b2b      	ldr	r3, [pc, #172]	; (80003ec <MX_TIM2_Init+0xe8>)
 8000340:	2200      	movs	r2, #0
 8000342:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000344:	4b29      	ldr	r3, [pc, #164]	; (80003ec <MX_TIM2_Init+0xe8>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800034a:	4b28      	ldr	r3, [pc, #160]	; (80003ec <MX_TIM2_Init+0xe8>)
 800034c:	2263      	movs	r2, #99	; 0x63
 800034e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000350:	4b26      	ldr	r3, [pc, #152]	; (80003ec <MX_TIM2_Init+0xe8>)
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000356:	4b25      	ldr	r3, [pc, #148]	; (80003ec <MX_TIM2_Init+0xe8>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800035c:	4823      	ldr	r0, [pc, #140]	; (80003ec <MX_TIM2_Init+0xe8>)
 800035e:	f002 f861 	bl	8002424 <HAL_TIM_Base_Init>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000368:	f000 f92e 	bl	80005c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800036c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000370:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000376:	4619      	mov	r1, r3
 8000378:	481c      	ldr	r0, [pc, #112]	; (80003ec <MX_TIM2_Init+0xe8>)
 800037a:	f002 fb0b 	bl	8002994 <HAL_TIM_ConfigClockSource>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000384:	f000 f920 	bl	80005c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000388:	4818      	ldr	r0, [pc, #96]	; (80003ec <MX_TIM2_Init+0xe8>)
 800038a:	f002 f8a2 	bl	80024d2 <HAL_TIM_PWM_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000394:	f000 f918 	bl	80005c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000398:	2300      	movs	r3, #0
 800039a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800039c:	2300      	movs	r3, #0
 800039e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003a0:	f107 031c 	add.w	r3, r7, #28
 80003a4:	4619      	mov	r1, r3
 80003a6:	4811      	ldr	r0, [pc, #68]	; (80003ec <MX_TIM2_Init+0xe8>)
 80003a8:	f002 ff9c 	bl	80032e4 <HAL_TIMEx_MasterConfigSynchronization>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80003b2:	f000 f909 	bl	80005c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003b6:	2360      	movs	r3, #96	; 0x60
 80003b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 90;
 80003ba:	235a      	movs	r3, #90	; 0x5a
 80003bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003be:	2300      	movs	r3, #0
 80003c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003c2:	2300      	movs	r3, #0
 80003c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003c6:	463b      	mov	r3, r7
 80003c8:	2200      	movs	r2, #0
 80003ca:	4619      	mov	r1, r3
 80003cc:	4807      	ldr	r0, [pc, #28]	; (80003ec <MX_TIM2_Init+0xe8>)
 80003ce:	f002 f9cd 	bl	800276c <HAL_TIM_PWM_ConfigChannel>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80003d8:	f000 f8f6 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003dc:	4803      	ldr	r0, [pc, #12]	; (80003ec <MX_TIM2_Init+0xe8>)
 80003de:	f000 f93d 	bl	800065c <HAL_TIM_MspPostInit>

}
 80003e2:	bf00      	nop
 80003e4:	3738      	adds	r7, #56	; 0x38
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	200000b8 	.word	0x200000b8

080003f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003f4:	4b14      	ldr	r3, [pc, #80]	; (8000448 <MX_USART1_UART_Init+0x58>)
 80003f6:	4a15      	ldr	r2, [pc, #84]	; (800044c <MX_USART1_UART_Init+0x5c>)
 80003f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80003fa:	4b13      	ldr	r3, [pc, #76]	; (8000448 <MX_USART1_UART_Init+0x58>)
 80003fc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000400:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000402:	4b11      	ldr	r3, [pc, #68]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000408:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <MX_USART1_UART_Init+0x58>)
 800040a:	2200      	movs	r2, #0
 800040c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800040e:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000414:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000416:	220c      	movs	r2, #12
 8000418:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041a:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <MX_USART1_UART_Init+0x58>)
 800041c:	2200      	movs	r2, #0
 800041e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000420:	4b09      	ldr	r3, [pc, #36]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000422:	2200      	movs	r2, #0
 8000424:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000428:	2200      	movs	r2, #0
 800042a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <MX_USART1_UART_Init+0x58>)
 800042e:	2200      	movs	r2, #0
 8000430:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000432:	4805      	ldr	r0, [pc, #20]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000434:	f002 ffc4 	bl	80033c0 <HAL_UART_Init>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800043e:	f000 f8c3 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000030 	.word	0x20000030
 800044c:	40013800 	.word	0x40013800

08000450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b088      	sub	sp, #32
 8000454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000456:	f107 030c 	add.w	r3, r7, #12
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
 8000462:	60da      	str	r2, [r3, #12]
 8000464:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000466:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <MX_GPIO_Init+0x90>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a1d      	ldr	r2, [pc, #116]	; (80004e0 <MX_GPIO_Init+0x90>)
 800046c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000470:	6153      	str	r3, [r2, #20]
 8000472:	4b1b      	ldr	r3, [pc, #108]	; (80004e0 <MX_GPIO_Init+0x90>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047e:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <MX_GPIO_Init+0x90>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a17      	ldr	r2, [pc, #92]	; (80004e0 <MX_GPIO_Init+0x90>)
 8000484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000488:	6153      	str	r3, [r2, #20]
 800048a:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <MX_GPIO_Init+0x90>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	2130      	movs	r1, #48	; 0x30
 800049a:	4812      	ldr	r0, [pc, #72]	; (80004e4 <MX_GPIO_Init+0x94>)
 800049c:	f000 fd46 	bl	8000f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 80004a0:	2384      	movs	r3, #132	; 0x84
 80004a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004a4:	2300      	movs	r3, #0
 80004a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ac:	f107 030c 	add.w	r3, r7, #12
 80004b0:	4619      	mov	r1, r3
 80004b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b6:	f000 fbaf 	bl	8000c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80004ba:	2330      	movs	r3, #48	; 0x30
 80004bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004be:	2301      	movs	r3, #1
 80004c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	4619      	mov	r1, r3
 80004d0:	4804      	ldr	r0, [pc, #16]	; (80004e4 <MX_GPIO_Init+0x94>)
 80004d2:	f000 fba1 	bl	8000c18 <HAL_GPIO_Init>

}
 80004d6:	bf00      	nop
 80004d8:	3720      	adds	r7, #32
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000
 80004e4:	48000400 	.word	0x48000400

080004e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
    if (huart -> Instance == USART1)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a2a      	ldr	r2, [pc, #168]	; (80005a0 <HAL_UART_RxCpltCallback+0xb8>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d14e      	bne.n	8000598 <HAL_UART_RxCpltCallback+0xb0>
    {
        HAL_UART_Receive_IT(&huart1, &rData, 1);
 80004fa:	2201      	movs	r2, #1
 80004fc:	4929      	ldr	r1, [pc, #164]	; (80005a4 <HAL_UART_RxCpltCallback+0xbc>)
 80004fe:	482a      	ldr	r0, [pc, #168]	; (80005a8 <HAL_UART_RxCpltCallback+0xc0>)
 8000500:	f002 ffac 	bl	800345c <HAL_UART_Receive_IT>
        receiveBuffer[pos++] = rData;
 8000504:	4b29      	ldr	r3, [pc, #164]	; (80005ac <HAL_UART_RxCpltCallback+0xc4>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	1c5a      	adds	r2, r3, #1
 800050a:	b2d1      	uxtb	r1, r2
 800050c:	4a27      	ldr	r2, [pc, #156]	; (80005ac <HAL_UART_RxCpltCallback+0xc4>)
 800050e:	7011      	strb	r1, [r2, #0]
 8000510:	461a      	mov	r2, r3
 8000512:	4b24      	ldr	r3, [pc, #144]	; (80005a4 <HAL_UART_RxCpltCallback+0xbc>)
 8000514:	7819      	ldrb	r1, [r3, #0]
 8000516:	4b26      	ldr	r3, [pc, #152]	; (80005b0 <HAL_UART_RxCpltCallback+0xc8>)
 8000518:	5499      	strb	r1, [r3, r2]

        if (rData == '\n')
 800051a:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <HAL_UART_RxCpltCallback+0xbc>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b0a      	cmp	r3, #10
 8000520:	d13a      	bne.n	8000598 <HAL_UART_RxCpltCallback+0xb0>
                {
                        pos = 0;
 8000522:	4b22      	ldr	r3, [pc, #136]	; (80005ac <HAL_UART_RxCpltCallback+0xc4>)
 8000524:	2200      	movs	r2, #0
 8000526:	701a      	strb	r2, [r3, #0]

                        if (strstr(receiveBuffer, "OP"))
 8000528:	4922      	ldr	r1, [pc, #136]	; (80005b4 <HAL_UART_RxCpltCallback+0xcc>)
 800052a:	4821      	ldr	r0, [pc, #132]	; (80005b0 <HAL_UART_RxCpltCallback+0xc8>)
 800052c:	f004 f8aa 	bl	8004684 <strstr>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d012      	beq.n	800055c <HAL_UART_RxCpltCallback+0x74>
                        {
                        	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulseWidth);
 8000536:	4b20      	ldr	r3, [pc, #128]	; (80005b8 <HAL_UART_RxCpltCallback+0xd0>)
 8000538:	881a      	ldrh	r2, [r3, #0]
 800053a:	4b20      	ldr	r3, [pc, #128]	; (80005bc <HAL_UART_RxCpltCallback+0xd4>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	635a      	str	r2, [r3, #52]	; 0x34
                            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2120      	movs	r1, #32
 8000544:	481e      	ldr	r0, [pc, #120]	; (80005c0 <HAL_UART_RxCpltCallback+0xd8>)
 8000546:	f000 fcf1 	bl	8000f2c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2110      	movs	r1, #16
 800054e:	481c      	ldr	r0, [pc, #112]	; (80005c0 <HAL_UART_RxCpltCallback+0xd8>)
 8000550:	f000 fcec 	bl	8000f2c <HAL_GPIO_WritePin>
                            pulseWidth = 90;
 8000554:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <HAL_UART_RxCpltCallback+0xd0>)
 8000556:	225a      	movs	r2, #90	; 0x5a
 8000558:	801a      	strh	r2, [r3, #0]
 800055a:	e018      	b.n	800058e <HAL_UART_RxCpltCallback+0xa6>
                        }
                        else if (strstr(receiveBuffer, "CL"))
 800055c:	4919      	ldr	r1, [pc, #100]	; (80005c4 <HAL_UART_RxCpltCallback+0xdc>)
 800055e:	4814      	ldr	r0, [pc, #80]	; (80005b0 <HAL_UART_RxCpltCallback+0xc8>)
 8000560:	f004 f890 	bl	8004684 <strstr>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d011      	beq.n	800058e <HAL_UART_RxCpltCallback+0xa6>
                        {
                        	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulseWidth);
 800056a:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <HAL_UART_RxCpltCallback+0xd0>)
 800056c:	881a      	ldrh	r2, [r3, #0]
 800056e:	4b13      	ldr	r3, [pc, #76]	; (80005bc <HAL_UART_RxCpltCallback+0xd4>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	635a      	str	r2, [r3, #52]	; 0x34
                            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000574:	2201      	movs	r2, #1
 8000576:	2120      	movs	r1, #32
 8000578:	4811      	ldr	r0, [pc, #68]	; (80005c0 <HAL_UART_RxCpltCallback+0xd8>)
 800057a:	f000 fcd7 	bl	8000f2c <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2110      	movs	r1, #16
 8000582:	480f      	ldr	r0, [pc, #60]	; (80005c0 <HAL_UART_RxCpltCallback+0xd8>)
 8000584:	f000 fcd2 	bl	8000f2c <HAL_GPIO_WritePin>
                            pulseWidth = 90;
 8000588:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <HAL_UART_RxCpltCallback+0xd0>)
 800058a:	225a      	movs	r2, #90	; 0x5a
 800058c:	801a      	strh	r2, [r3, #0]
                        }

                        memset(receiveBuffer, 0, 8);
 800058e:	2208      	movs	r2, #8
 8000590:	2100      	movs	r1, #0
 8000592:	4807      	ldr	r0, [pc, #28]	; (80005b0 <HAL_UART_RxCpltCallback+0xc8>)
 8000594:	f004 f86e 	bl	8004674 <memset>

                }
    }
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40013800 	.word	0x40013800
 80005a4:	200000b4 	.word	0x200000b4
 80005a8:	20000030 	.word	0x20000030
 80005ac:	2000002c 	.word	0x2000002c
 80005b0:	20000104 	.word	0x20000104
 80005b4:	080046cc 	.word	0x080046cc
 80005b8:	20000000 	.word	0x20000000
 80005bc:	200000b8 	.word	0x200000b8
 80005c0:	48000400 	.word	0x48000400
 80005c4:	080046d0 	.word	0x080046d0

080005c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
	...

080005d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <HAL_MspInit+0x44>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	4a0e      	ldr	r2, [pc, #56]	; (800061c <HAL_MspInit+0x44>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6193      	str	r3, [r2, #24]
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <HAL_MspInit+0x44>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <HAL_MspInit+0x44>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	4a08      	ldr	r2, [pc, #32]	; (800061c <HAL_MspInit+0x44>)
 80005fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000600:	61d3      	str	r3, [r2, #28]
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <HAL_MspInit+0x44>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40021000 	.word	0x40021000

08000620 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000630:	d10b      	bne.n	800064a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <HAL_TIM_Base_MspInit+0x38>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	4a08      	ldr	r2, [pc, #32]	; (8000658 <HAL_TIM_Base_MspInit+0x38>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	61d3      	str	r3, [r2, #28]
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_TIM_Base_MspInit+0x38>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000

0800065c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800067c:	d11c      	bne.n	80006b8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <HAL_TIM_MspPostInit+0x64>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	4a0f      	ldr	r2, [pc, #60]	; (80006c0 <HAL_TIM_MspPostInit+0x64>)
 8000684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000688:	6153      	str	r3, [r2, #20]
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <HAL_TIM_MspPostInit+0x64>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000696:	2301      	movs	r3, #1
 8000698:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069a:	2302      	movs	r3, #2
 800069c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	4619      	mov	r1, r3
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b4:	f000 fab0 	bl	8000c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000

080006c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a1c      	ldr	r2, [pc, #112]	; (8000754 <HAL_UART_MspInit+0x90>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d131      	bne.n	800074a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <HAL_UART_MspInit+0x94>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	4a1b      	ldr	r2, [pc, #108]	; (8000758 <HAL_UART_MspInit+0x94>)
 80006ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f0:	6193      	str	r3, [r2, #24]
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <HAL_UART_MspInit+0x94>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <HAL_UART_MspInit+0x94>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	4a15      	ldr	r2, [pc, #84]	; (8000758 <HAL_UART_MspInit+0x94>)
 8000704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000708:	6153      	str	r3, [r2, #20]
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <HAL_UART_MspInit+0x94>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000716:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800071a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000724:	2303      	movs	r3, #3
 8000726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000728:	2307      	movs	r3, #7
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000736:	f000 fa6f 	bl	8000c18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	2025      	movs	r0, #37	; 0x25
 8000740:	f000 f9bd 	bl	8000abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000744:	2025      	movs	r0, #37	; 0x25
 8000746:	f000 f9d6 	bl	8000af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800074a:	bf00      	nop
 800074c:	3728      	adds	r7, #40	; 0x28
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40013800 	.word	0x40013800
 8000758:	40021000 	.word	0x40021000

0800075c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <NMI_Handler+0x4>

08000762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000766:	e7fe      	b.n	8000766 <HardFault_Handler+0x4>

08000768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800076c:	e7fe      	b.n	800076c <MemManage_Handler+0x4>

0800076e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000772:	e7fe      	b.n	8000772 <BusFault_Handler+0x4>

08000774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <UsageFault_Handler+0x4>

0800077a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a8:	f000 f88e 	bl	80008c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <USART1_IRQHandler+0x10>)
 80007b6:	f002 fe9f 	bl	80034f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000030 	.word	0x20000030

080007c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <SystemInit+0x20>)
 80007ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ce:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <SystemInit+0x20>)
 80007d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000820 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ee:	490e      	ldr	r1, [pc, #56]	; (8000828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007f0:	4a0e      	ldr	r2, [pc, #56]	; (800082c <LoopForever+0xe>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f4:	e002      	b.n	80007fc <LoopCopyDataInit>

080007f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fa:	3304      	adds	r3, #4

080007fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000800:	d3f9      	bcc.n	80007f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000802:	4a0b      	ldr	r2, [pc, #44]	; (8000830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000804:	4c0b      	ldr	r4, [pc, #44]	; (8000834 <LoopForever+0x16>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000808:	e001      	b.n	800080e <LoopFillZerobss>

0800080a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800080c:	3204      	adds	r2, #4

0800080e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000810:	d3fb      	bcc.n	800080a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000812:	f7ff ffd7 	bl	80007c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000816:	f003 ff09 	bl	800462c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800081a:	f7ff fcd5 	bl	80001c8 <main>

0800081e <LoopForever>:

LoopForever:
    b LoopForever
 800081e:	e7fe      	b.n	800081e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000820:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000828:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800082c:	08004714 	.word	0x08004714
  ldr r2, =_sbss
 8000830:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000834:	20000110 	.word	0x20000110

08000838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000838:	e7fe      	b.n	8000838 <ADC1_2_IRQHandler>
	...

0800083c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_Init+0x28>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <HAL_Init+0x28>)
 8000846:	f043 0310 	orr.w	r3, r3, #16
 800084a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800084c:	2003      	movs	r0, #3
 800084e:	f000 f92b 	bl	8000aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000852:	200f      	movs	r0, #15
 8000854:	f000 f808 	bl	8000868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000858:	f7ff febe 	bl	80005d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40022000 	.word	0x40022000

08000868 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_InitTick+0x54>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <HAL_InitTick+0x58>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000882:	fbb2 f3f3 	udiv	r3, r2, r3
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f943 	bl	8000b12 <HAL_SYSTICK_Config>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	e00e      	b.n	80008b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2b0f      	cmp	r3, #15
 800089a:	d80a      	bhi.n	80008b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800089c:	2200      	movs	r2, #0
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	f000 f90b 	bl	8000abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a8:	4a06      	ldr	r2, [pc, #24]	; (80008c4 <HAL_InitTick+0x5c>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008ae:	2300      	movs	r3, #0
 80008b0:	e000      	b.n	80008b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000004 	.word	0x20000004
 80008c0:	2000000c 	.word	0x2000000c
 80008c4:	20000008 	.word	0x20000008

080008c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_IncTick+0x20>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_IncTick+0x24>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4413      	add	r3, r2
 80008d8:	4a04      	ldr	r2, [pc, #16]	; (80008ec <HAL_IncTick+0x24>)
 80008da:	6013      	str	r3, [r2, #0]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	2000000c 	.word	0x2000000c
 80008ec:	2000010c 	.word	0x2000010c

080008f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80008f4:	4b03      	ldr	r3, [pc, #12]	; (8000904 <HAL_GetTick+0x14>)
 80008f6:	681b      	ldr	r3, [r3, #0]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	2000010c 	.word	0x2000010c

08000908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000924:	4013      	ands	r3, r2
 8000926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800093a:	4a04      	ldr	r2, [pc, #16]	; (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	60d3      	str	r3, [r2, #12]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <__NVIC_GetPriorityGrouping+0x18>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	f003 0307 	and.w	r3, r3, #7
}
 800095e:	4618      	mov	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	2b00      	cmp	r3, #0
 800097c:	db0b      	blt.n	8000996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f003 021f 	and.w	r2, r3, #31
 8000984:	4907      	ldr	r1, [pc, #28]	; (80009a4 <__NVIC_EnableIRQ+0x38>)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	095b      	lsrs	r3, r3, #5
 800098c:	2001      	movs	r0, #1
 800098e:	fa00 f202 	lsl.w	r2, r0, r2
 8000992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000e100 	.word	0xe000e100

080009a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	6039      	str	r1, [r7, #0]
 80009b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	db0a      	blt.n	80009d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	490c      	ldr	r1, [pc, #48]	; (80009f4 <__NVIC_SetPriority+0x4c>)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	0112      	lsls	r2, r2, #4
 80009c8:	b2d2      	uxtb	r2, r2
 80009ca:	440b      	add	r3, r1
 80009cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d0:	e00a      	b.n	80009e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4908      	ldr	r1, [pc, #32]	; (80009f8 <__NVIC_SetPriority+0x50>)
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	f003 030f 	and.w	r3, r3, #15
 80009de:	3b04      	subs	r3, #4
 80009e0:	0112      	lsls	r2, r2, #4
 80009e2:	b2d2      	uxtb	r2, r2
 80009e4:	440b      	add	r3, r1
 80009e6:	761a      	strb	r2, [r3, #24]
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000e100 	.word	0xe000e100
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b089      	sub	sp, #36	; 0x24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	f1c3 0307 	rsb	r3, r3, #7
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	bf28      	it	cs
 8000a1a:	2304      	movcs	r3, #4
 8000a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3304      	adds	r3, #4
 8000a22:	2b06      	cmp	r3, #6
 8000a24:	d902      	bls.n	8000a2c <NVIC_EncodePriority+0x30>
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3b03      	subs	r3, #3
 8000a2a:	e000      	b.n	8000a2e <NVIC_EncodePriority+0x32>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a30:	f04f 32ff 	mov.w	r2, #4294967295
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43da      	mvns	r2, r3
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	401a      	ands	r2, r3
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a44:	f04f 31ff 	mov.w	r1, #4294967295
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4e:	43d9      	mvns	r1, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	4313      	orrs	r3, r2
         );
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3724      	adds	r7, #36	; 0x24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
	...

08000a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a74:	d301      	bcc.n	8000a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a76:	2301      	movs	r3, #1
 8000a78:	e00f      	b.n	8000a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <SysTick_Config+0x40>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a82:	210f      	movs	r1, #15
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	f7ff ff8e 	bl	80009a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <SysTick_Config+0x40>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a92:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <SysTick_Config+0x40>)
 8000a94:	2207      	movs	r2, #7
 8000a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	e000e010 	.word	0xe000e010

08000aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff ff29 	bl	8000908 <__NVIC_SetPriorityGrouping>
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b086      	sub	sp, #24
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	60b9      	str	r1, [r7, #8]
 8000ac8:	607a      	str	r2, [r7, #4]
 8000aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad0:	f7ff ff3e 	bl	8000950 <__NVIC_GetPriorityGrouping>
 8000ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	68b9      	ldr	r1, [r7, #8]
 8000ada:	6978      	ldr	r0, [r7, #20]
 8000adc:	f7ff ff8e 	bl	80009fc <NVIC_EncodePriority>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff5d 	bl	80009a8 <__NVIC_SetPriority>
}
 8000aee:	bf00      	nop
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	4603      	mov	r3, r0
 8000afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff31 	bl	800096c <__NVIC_EnableIRQ>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ffa2 	bl	8000a64 <SysTick_Config>
 8000b20:	4603      	mov	r3, r0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d008      	beq.n	8000b4e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2204      	movs	r2, #4
 8000b40:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e020      	b.n	8000b90 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f022 020e 	bic.w	r2, r2, #14
 8000b5c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f022 0201 	bic.w	r2, r2, #1
 8000b6c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b76:	2101      	movs	r1, #1
 8000b78:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2201      	movs	r2, #1
 8000b82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d005      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	73fb      	strb	r3, [r7, #15]
 8000bbc:	e027      	b.n	8000c0e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f022 020e 	bic.w	r2, r2, #14
 8000bcc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f022 0201 	bic.w	r2, r2, #1
 8000bdc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000be6:	2101      	movs	r1, #1
 8000be8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bec:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	4798      	blx	r3
    } 
  }
  return status;
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b087      	sub	sp, #28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c26:	e14e      	b.n	8000ec6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	fa01 f303 	lsl.w	r3, r1, r3
 8000c34:	4013      	ands	r3, r2
 8000c36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f000 8140 	beq.w	8000ec0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d005      	beq.n	8000c58 <HAL_GPIO_Init+0x40>
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f003 0303 	and.w	r3, r3, #3
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d130      	bne.n	8000cba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	2203      	movs	r2, #3
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	68da      	ldr	r2, [r3, #12]
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c8e:	2201      	movs	r2, #1
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	091b      	lsrs	r3, r3, #4
 8000ca4:	f003 0201 	and.w	r2, r3, #1
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f003 0303 	and.w	r3, r3, #3
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d017      	beq.n	8000cf6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 0303 	and.w	r3, r3, #3
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d123      	bne.n	8000d4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	08da      	lsrs	r2, r3, #3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3208      	adds	r2, #8
 8000d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	220f      	movs	r2, #15
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	691a      	ldr	r2, [r3, #16]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	f003 0307 	and.w	r3, r3, #7
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	08da      	lsrs	r2, r3, #3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3208      	adds	r2, #8
 8000d44:	6939      	ldr	r1, [r7, #16]
 8000d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	2203      	movs	r2, #3
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0203 	and.w	r2, r3, #3
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 809a 	beq.w	8000ec0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8c:	4b55      	ldr	r3, [pc, #340]	; (8000ee4 <HAL_GPIO_Init+0x2cc>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a54      	ldr	r2, [pc, #336]	; (8000ee4 <HAL_GPIO_Init+0x2cc>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b52      	ldr	r3, [pc, #328]	; (8000ee4 <HAL_GPIO_Init+0x2cc>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000da4:	4a50      	ldr	r2, [pc, #320]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	089b      	lsrs	r3, r3, #2
 8000daa:	3302      	adds	r3, #2
 8000dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	220f      	movs	r2, #15
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dce:	d013      	beq.n	8000df8 <HAL_GPIO_Init+0x1e0>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a46      	ldr	r2, [pc, #280]	; (8000eec <HAL_GPIO_Init+0x2d4>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d00d      	beq.n	8000df4 <HAL_GPIO_Init+0x1dc>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a45      	ldr	r2, [pc, #276]	; (8000ef0 <HAL_GPIO_Init+0x2d8>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d007      	beq.n	8000df0 <HAL_GPIO_Init+0x1d8>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a44      	ldr	r2, [pc, #272]	; (8000ef4 <HAL_GPIO_Init+0x2dc>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d101      	bne.n	8000dec <HAL_GPIO_Init+0x1d4>
 8000de8:	2303      	movs	r3, #3
 8000dea:	e006      	b.n	8000dfa <HAL_GPIO_Init+0x1e2>
 8000dec:	2305      	movs	r3, #5
 8000dee:	e004      	b.n	8000dfa <HAL_GPIO_Init+0x1e2>
 8000df0:	2302      	movs	r3, #2
 8000df2:	e002      	b.n	8000dfa <HAL_GPIO_Init+0x1e2>
 8000df4:	2301      	movs	r3, #1
 8000df6:	e000      	b.n	8000dfa <HAL_GPIO_Init+0x1e2>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	f002 0203 	and.w	r2, r2, #3
 8000e00:	0092      	lsls	r2, r2, #2
 8000e02:	4093      	lsls	r3, r2
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e0a:	4937      	ldr	r1, [pc, #220]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	3302      	adds	r3, #2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e18:	4b37      	ldr	r3, [pc, #220]	; (8000ef8 <HAL_GPIO_Init+0x2e0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e3c:	4a2e      	ldr	r2, [pc, #184]	; (8000ef8 <HAL_GPIO_Init+0x2e0>)
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e42:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <HAL_GPIO_Init+0x2e0>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e66:	4a24      	ldr	r2, [pc, #144]	; (8000ef8 <HAL_GPIO_Init+0x2e0>)
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e6c:	4b22      	ldr	r3, [pc, #136]	; (8000ef8 <HAL_GPIO_Init+0x2e0>)
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e90:	4a19      	ldr	r2, [pc, #100]	; (8000ef8 <HAL_GPIO_Init+0x2e0>)
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <HAL_GPIO_Init+0x2e0>)
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000eba:	4a0f      	ldr	r2, [pc, #60]	; (8000ef8 <HAL_GPIO_Init+0x2e0>)
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f47f aea9 	bne.w	8000c28 <HAL_GPIO_Init+0x10>
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	371c      	adds	r7, #28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010000 	.word	0x40010000
 8000eec:	48000400 	.word	0x48000400
 8000ef0:	48000800 	.word	0x48000800
 8000ef4:	48000c00 	.word	0x48000c00
 8000ef8:	40010400 	.word	0x40010400

08000efc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	691a      	ldr	r2, [r3, #16]
 8000f0c:	887b      	ldrh	r3, [r7, #2]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d002      	beq.n	8000f1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e001      	b.n	8000f1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	807b      	strh	r3, [r7, #2]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f3c:	787b      	ldrb	r3, [r7, #1]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f42:	887a      	ldrh	r2, [r7, #2]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f48:	e002      	b.n	8000f50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f4a:	887a      	ldrh	r2, [r7, #2]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d102      	bne.n	8000f76 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	f000 bef4 	b.w	8001d5e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 816a 	beq.w	800125a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f86:	4bb3      	ldr	r3, [pc, #716]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 030c 	and.w	r3, r3, #12
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d00c      	beq.n	8000fac <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f92:	4bb0      	ldr	r3, [pc, #704]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 030c 	and.w	r3, r3, #12
 8000f9a:	2b08      	cmp	r3, #8
 8000f9c:	d159      	bne.n	8001052 <HAL_RCC_OscConfig+0xf6>
 8000f9e:	4bad      	ldr	r3, [pc, #692]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000faa:	d152      	bne.n	8001052 <HAL_RCC_OscConfig+0xf6>
 8000fac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000fb8:	fa93 f3a3 	rbit	r3, r3
 8000fbc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fc0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc4:	fab3 f383 	clz	r3, r3
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	095b      	lsrs	r3, r3, #5
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d102      	bne.n	8000fde <HAL_RCC_OscConfig+0x82>
 8000fd8:	4b9e      	ldr	r3, [pc, #632]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	e015      	b.n	800100a <HAL_RCC_OscConfig+0xae>
 8000fde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000fea:	fa93 f3a3 	rbit	r3, r3
 8000fee:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000ff2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000ffa:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000ffe:	fa93 f3a3 	rbit	r3, r3
 8001002:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001006:	4b93      	ldr	r3, [pc, #588]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 8001008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800100e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001012:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001016:	fa92 f2a2 	rbit	r2, r2
 800101a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800101e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001022:	fab2 f282 	clz	r2, r2
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	f042 0220 	orr.w	r2, r2, #32
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	f002 021f 	and.w	r2, r2, #31
 8001032:	2101      	movs	r1, #1
 8001034:	fa01 f202 	lsl.w	r2, r1, r2
 8001038:	4013      	ands	r3, r2
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 810c 	beq.w	8001258 <HAL_RCC_OscConfig+0x2fc>
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	f040 8106 	bne.w	8001258 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	f000 be86 	b.w	8001d5e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800105c:	d106      	bne.n	800106c <HAL_RCC_OscConfig+0x110>
 800105e:	4b7d      	ldr	r3, [pc, #500]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a7c      	ldr	r2, [pc, #496]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 8001064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	e030      	b.n	80010ce <HAL_RCC_OscConfig+0x172>
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10c      	bne.n	8001090 <HAL_RCC_OscConfig+0x134>
 8001076:	4b77      	ldr	r3, [pc, #476]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a76      	ldr	r2, [pc, #472]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 800107c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	4b74      	ldr	r3, [pc, #464]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a73      	ldr	r2, [pc, #460]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 8001088:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	e01e      	b.n	80010ce <HAL_RCC_OscConfig+0x172>
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800109a:	d10c      	bne.n	80010b6 <HAL_RCC_OscConfig+0x15a>
 800109c:	4b6d      	ldr	r3, [pc, #436]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a6c      	ldr	r2, [pc, #432]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 80010a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b6a      	ldr	r3, [pc, #424]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a69      	ldr	r2, [pc, #420]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 80010ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	e00b      	b.n	80010ce <HAL_RCC_OscConfig+0x172>
 80010b6:	4b67      	ldr	r3, [pc, #412]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a66      	ldr	r2, [pc, #408]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 80010bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	4b64      	ldr	r3, [pc, #400]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a63      	ldr	r2, [pc, #396]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 80010c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010cc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010ce:	4b61      	ldr	r3, [pc, #388]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 80010d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d2:	f023 020f 	bic.w	r2, r3, #15
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	495d      	ldr	r1, [pc, #372]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d059      	beq.n	80011a0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ec:	f7ff fc00 	bl	80008f0 <HAL_GetTick>
 80010f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f4:	e00a      	b.n	800110c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f6:	f7ff fbfb 	bl	80008f0 <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d902      	bls.n	800110c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	f000 be29 	b.w	8001d5e <HAL_RCC_OscConfig+0xe02>
 800110c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001110:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001114:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001118:	fa93 f3a3 	rbit	r3, r3
 800111c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001120:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001124:	fab3 f383 	clz	r3, r3
 8001128:	b2db      	uxtb	r3, r3
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	b2db      	uxtb	r3, r3
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b01      	cmp	r3, #1
 8001136:	d102      	bne.n	800113e <HAL_RCC_OscConfig+0x1e2>
 8001138:	4b46      	ldr	r3, [pc, #280]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	e015      	b.n	800116a <HAL_RCC_OscConfig+0x20e>
 800113e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001142:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001146:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800114a:	fa93 f3a3 	rbit	r3, r3
 800114e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001152:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001156:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800115a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800115e:	fa93 f3a3 	rbit	r3, r3
 8001162:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001166:	4b3b      	ldr	r3, [pc, #236]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 8001168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800116e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001172:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001176:	fa92 f2a2 	rbit	r2, r2
 800117a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800117e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001182:	fab2 f282 	clz	r2, r2
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	f042 0220 	orr.w	r2, r2, #32
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	f002 021f 	and.w	r2, r2, #31
 8001192:	2101      	movs	r1, #1
 8001194:	fa01 f202 	lsl.w	r2, r1, r2
 8001198:	4013      	ands	r3, r2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0ab      	beq.n	80010f6 <HAL_RCC_OscConfig+0x19a>
 800119e:	e05c      	b.n	800125a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fba6 	bl	80008f0 <HAL_GetTick>
 80011a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a8:	e00a      	b.n	80011c0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011aa:	f7ff fba1 	bl	80008f0 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b64      	cmp	r3, #100	; 0x64
 80011b8:	d902      	bls.n	80011c0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	f000 bdcf 	b.w	8001d5e <HAL_RCC_OscConfig+0xe02>
 80011c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011c4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80011cc:	fa93 f3a3 	rbit	r3, r3
 80011d0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80011d4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d8:	fab3 f383 	clz	r3, r3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	095b      	lsrs	r3, r3, #5
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d102      	bne.n	80011f2 <HAL_RCC_OscConfig+0x296>
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	e015      	b.n	800121e <HAL_RCC_OscConfig+0x2c2>
 80011f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011f6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80011fe:	fa93 f3a3 	rbit	r3, r3
 8001202:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001206:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800120a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800120e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001212:	fa93 f3a3 	rbit	r3, r3
 8001216:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <HAL_RCC_OscConfig+0x2f8>)
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001222:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001226:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800122a:	fa92 f2a2 	rbit	r2, r2
 800122e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001232:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001236:	fab2 f282 	clz	r2, r2
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	f042 0220 	orr.w	r2, r2, #32
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	f002 021f 	and.w	r2, r2, #31
 8001246:	2101      	movs	r1, #1
 8001248:	fa01 f202 	lsl.w	r2, r1, r2
 800124c:	4013      	ands	r3, r2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1ab      	bne.n	80011aa <HAL_RCC_OscConfig+0x24e>
 8001252:	e002      	b.n	800125a <HAL_RCC_OscConfig+0x2fe>
 8001254:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 816f 	beq.w	8001548 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800126a:	4bd0      	ldr	r3, [pc, #832]	; (80015ac <HAL_RCC_OscConfig+0x650>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 030c 	and.w	r3, r3, #12
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00b      	beq.n	800128e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001276:	4bcd      	ldr	r3, [pc, #820]	; (80015ac <HAL_RCC_OscConfig+0x650>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 030c 	and.w	r3, r3, #12
 800127e:	2b08      	cmp	r3, #8
 8001280:	d16c      	bne.n	800135c <HAL_RCC_OscConfig+0x400>
 8001282:	4bca      	ldr	r3, [pc, #808]	; (80015ac <HAL_RCC_OscConfig+0x650>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d166      	bne.n	800135c <HAL_RCC_OscConfig+0x400>
 800128e:	2302      	movs	r3, #2
 8001290:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001294:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001298:	fa93 f3a3 	rbit	r3, r3
 800129c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80012a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a4:	fab3 f383 	clz	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	095b      	lsrs	r3, r3, #5
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d102      	bne.n	80012be <HAL_RCC_OscConfig+0x362>
 80012b8:	4bbc      	ldr	r3, [pc, #752]	; (80015ac <HAL_RCC_OscConfig+0x650>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	e013      	b.n	80012e6 <HAL_RCC_OscConfig+0x38a>
 80012be:	2302      	movs	r3, #2
 80012c0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80012c8:	fa93 f3a3 	rbit	r3, r3
 80012cc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80012d0:	2302      	movs	r3, #2
 80012d2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80012d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80012da:	fa93 f3a3 	rbit	r3, r3
 80012de:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80012e2:	4bb2      	ldr	r3, [pc, #712]	; (80015ac <HAL_RCC_OscConfig+0x650>)
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	2202      	movs	r2, #2
 80012e8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80012ec:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80012f0:	fa92 f2a2 	rbit	r2, r2
 80012f4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80012f8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80012fc:	fab2 f282 	clz	r2, r2
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	f042 0220 	orr.w	r2, r2, #32
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	f002 021f 	and.w	r2, r2, #31
 800130c:	2101      	movs	r1, #1
 800130e:	fa01 f202 	lsl.w	r2, r1, r2
 8001312:	4013      	ands	r3, r2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d007      	beq.n	8001328 <HAL_RCC_OscConfig+0x3cc>
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d002      	beq.n	8001328 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	f000 bd1b 	b.w	8001d5e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001328:	4ba0      	ldr	r3, [pc, #640]	; (80015ac <HAL_RCC_OscConfig+0x650>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	21f8      	movs	r1, #248	; 0xf8
 8001338:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001340:	fa91 f1a1 	rbit	r1, r1
 8001344:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001348:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800134c:	fab1 f181 	clz	r1, r1
 8001350:	b2c9      	uxtb	r1, r1
 8001352:	408b      	lsls	r3, r1
 8001354:	4995      	ldr	r1, [pc, #596]	; (80015ac <HAL_RCC_OscConfig+0x650>)
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135a:	e0f5      	b.n	8001548 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 8085 	beq.w	8001472 <HAL_RCC_OscConfig+0x516>
 8001368:	2301      	movs	r3, #1
 800136a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001372:	fa93 f3a3 	rbit	r3, r3
 8001376:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800137a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800137e:	fab3 f383 	clz	r3, r3
 8001382:	b2db      	uxtb	r3, r3
 8001384:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001388:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	461a      	mov	r2, r3
 8001390:	2301      	movs	r3, #1
 8001392:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001394:	f7ff faac 	bl	80008f0 <HAL_GetTick>
 8001398:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139c:	e00a      	b.n	80013b4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800139e:	f7ff faa7 	bl	80008f0 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d902      	bls.n	80013b4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	f000 bcd5 	b.w	8001d5e <HAL_RCC_OscConfig+0xe02>
 80013b4:	2302      	movs	r3, #2
 80013b6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80013be:	fa93 f3a3 	rbit	r3, r3
 80013c2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80013c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ca:	fab3 f383 	clz	r3, r3
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	095b      	lsrs	r3, r3, #5
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d102      	bne.n	80013e4 <HAL_RCC_OscConfig+0x488>
 80013de:	4b73      	ldr	r3, [pc, #460]	; (80015ac <HAL_RCC_OscConfig+0x650>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	e013      	b.n	800140c <HAL_RCC_OscConfig+0x4b0>
 80013e4:	2302      	movs	r3, #2
 80013e6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80013ee:	fa93 f3a3 	rbit	r3, r3
 80013f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80013f6:	2302      	movs	r3, #2
 80013f8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80013fc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001400:	fa93 f3a3 	rbit	r3, r3
 8001404:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001408:	4b68      	ldr	r3, [pc, #416]	; (80015ac <HAL_RCC_OscConfig+0x650>)
 800140a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140c:	2202      	movs	r2, #2
 800140e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001412:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001416:	fa92 f2a2 	rbit	r2, r2
 800141a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800141e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001422:	fab2 f282 	clz	r2, r2
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	f042 0220 	orr.w	r2, r2, #32
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	f002 021f 	and.w	r2, r2, #31
 8001432:	2101      	movs	r1, #1
 8001434:	fa01 f202 	lsl.w	r2, r1, r2
 8001438:	4013      	ands	r3, r2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0af      	beq.n	800139e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143e:	4b5b      	ldr	r3, [pc, #364]	; (80015ac <HAL_RCC_OscConfig+0x650>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	21f8      	movs	r1, #248	; 0xf8
 800144e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001452:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001456:	fa91 f1a1 	rbit	r1, r1
 800145a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800145e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001462:	fab1 f181 	clz	r1, r1
 8001466:	b2c9      	uxtb	r1, r1
 8001468:	408b      	lsls	r3, r1
 800146a:	4950      	ldr	r1, [pc, #320]	; (80015ac <HAL_RCC_OscConfig+0x650>)
 800146c:	4313      	orrs	r3, r2
 800146e:	600b      	str	r3, [r1, #0]
 8001470:	e06a      	b.n	8001548 <HAL_RCC_OscConfig+0x5ec>
 8001472:	2301      	movs	r3, #1
 8001474:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001478:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800147c:	fa93 f3a3 	rbit	r3, r3
 8001480:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001484:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001488:	fab3 f383 	clz	r3, r3
 800148c:	b2db      	uxtb	r3, r3
 800148e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001492:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	461a      	mov	r2, r3
 800149a:	2300      	movs	r3, #0
 800149c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149e:	f7ff fa27 	bl	80008f0 <HAL_GetTick>
 80014a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a6:	e00a      	b.n	80014be <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a8:	f7ff fa22 	bl	80008f0 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d902      	bls.n	80014be <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	f000 bc50 	b.w	8001d5e <HAL_RCC_OscConfig+0xe02>
 80014be:	2302      	movs	r3, #2
 80014c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80014c8:	fa93 f3a3 	rbit	r3, r3
 80014cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80014d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d4:	fab3 f383 	clz	r3, r3
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d102      	bne.n	80014ee <HAL_RCC_OscConfig+0x592>
 80014e8:	4b30      	ldr	r3, [pc, #192]	; (80015ac <HAL_RCC_OscConfig+0x650>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	e013      	b.n	8001516 <HAL_RCC_OscConfig+0x5ba>
 80014ee:	2302      	movs	r3, #2
 80014f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014f8:	fa93 f3a3 	rbit	r3, r3
 80014fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001500:	2302      	movs	r3, #2
 8001502:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001506:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800150a:	fa93 f3a3 	rbit	r3, r3
 800150e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001512:	4b26      	ldr	r3, [pc, #152]	; (80015ac <HAL_RCC_OscConfig+0x650>)
 8001514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001516:	2202      	movs	r2, #2
 8001518:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800151c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001520:	fa92 f2a2 	rbit	r2, r2
 8001524:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001528:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800152c:	fab2 f282 	clz	r2, r2
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	f042 0220 	orr.w	r2, r2, #32
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	f002 021f 	and.w	r2, r2, #31
 800153c:	2101      	movs	r1, #1
 800153e:	fa01 f202 	lsl.w	r2, r1, r2
 8001542:	4013      	ands	r3, r2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1af      	bne.n	80014a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 80da 	beq.w	800170c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d069      	beq.n	8001636 <HAL_RCC_OscConfig+0x6da>
 8001562:	2301      	movs	r3, #1
 8001564:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001568:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800156c:	fa93 f3a3 	rbit	r3, r3
 8001570:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001574:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001578:	fab3 f383 	clz	r3, r3
 800157c:	b2db      	uxtb	r3, r3
 800157e:	461a      	mov	r2, r3
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_RCC_OscConfig+0x654>)
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	461a      	mov	r2, r3
 8001588:	2301      	movs	r3, #1
 800158a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158c:	f7ff f9b0 	bl	80008f0 <HAL_GetTick>
 8001590:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001594:	e00e      	b.n	80015b4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001596:	f7ff f9ab 	bl	80008f0 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d906      	bls.n	80015b4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e3d9      	b.n	8001d5e <HAL_RCC_OscConfig+0xe02>
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000
 80015b0:	10908120 	.word	0x10908120
 80015b4:	2302      	movs	r3, #2
 80015b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015be:	fa93 f3a3 	rbit	r3, r3
 80015c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80015ca:	2202      	movs	r2, #2
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	fa93 f2a3 	rbit	r2, r3
 80015d8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80015e2:	2202      	movs	r2, #2
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	fa93 f2a3 	rbit	r2, r3
 80015f0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80015f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f6:	4ba5      	ldr	r3, [pc, #660]	; (800188c <HAL_RCC_OscConfig+0x930>)
 80015f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015fa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80015fe:	2102      	movs	r1, #2
 8001600:	6019      	str	r1, [r3, #0]
 8001602:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	fa93 f1a3 	rbit	r1, r3
 800160c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001610:	6019      	str	r1, [r3, #0]
  return result;
 8001612:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	fab3 f383 	clz	r3, r3
 800161c:	b2db      	uxtb	r3, r3
 800161e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001622:	b2db      	uxtb	r3, r3
 8001624:	f003 031f 	and.w	r3, r3, #31
 8001628:	2101      	movs	r1, #1
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	4013      	ands	r3, r2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0b0      	beq.n	8001596 <HAL_RCC_OscConfig+0x63a>
 8001634:	e06a      	b.n	800170c <HAL_RCC_OscConfig+0x7b0>
 8001636:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	fa93 f2a3 	rbit	r2, r3
 8001648:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800164c:	601a      	str	r2, [r3, #0]
  return result;
 800164e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001652:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001654:	fab3 f383 	clz	r3, r3
 8001658:	b2db      	uxtb	r3, r3
 800165a:	461a      	mov	r2, r3
 800165c:	4b8c      	ldr	r3, [pc, #560]	; (8001890 <HAL_RCC_OscConfig+0x934>)
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	461a      	mov	r2, r3
 8001664:	2300      	movs	r3, #0
 8001666:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001668:	f7ff f942 	bl	80008f0 <HAL_GetTick>
 800166c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001670:	e009      	b.n	8001686 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001672:	f7ff f93d 	bl	80008f0 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e36b      	b.n	8001d5e <HAL_RCC_OscConfig+0xe02>
 8001686:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800168a:	2202      	movs	r2, #2
 800168c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	fa93 f2a3 	rbit	r2, r3
 8001698:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80016a2:	2202      	movs	r2, #2
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	fa93 f2a3 	rbit	r2, r3
 80016b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80016ba:	2202      	movs	r2, #2
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	fa93 f2a3 	rbit	r2, r3
 80016c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ce:	4b6f      	ldr	r3, [pc, #444]	; (800188c <HAL_RCC_OscConfig+0x930>)
 80016d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016d2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016d6:	2102      	movs	r1, #2
 80016d8:	6019      	str	r1, [r3, #0]
 80016da:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	fa93 f1a3 	rbit	r1, r3
 80016e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80016e8:	6019      	str	r1, [r3, #0]
  return result;
 80016ea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	fab3 f383 	clz	r3, r3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	f003 031f 	and.w	r3, r3, #31
 8001700:	2101      	movs	r1, #1
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	4013      	ands	r3, r2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1b2      	bne.n	8001672 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 8158 	beq.w	80019cc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001722:	4b5a      	ldr	r3, [pc, #360]	; (800188c <HAL_RCC_OscConfig+0x930>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d112      	bne.n	8001754 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	4b57      	ldr	r3, [pc, #348]	; (800188c <HAL_RCC_OscConfig+0x930>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	4a56      	ldr	r2, [pc, #344]	; (800188c <HAL_RCC_OscConfig+0x930>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001738:	61d3      	str	r3, [r2, #28]
 800173a:	4b54      	ldr	r3, [pc, #336]	; (800188c <HAL_RCC_OscConfig+0x930>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001742:	f107 0308 	add.w	r3, r7, #8
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	f107 0308 	add.w	r3, r7, #8
 800174c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800174e:	2301      	movs	r3, #1
 8001750:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001754:	4b4f      	ldr	r3, [pc, #316]	; (8001894 <HAL_RCC_OscConfig+0x938>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175c:	2b00      	cmp	r3, #0
 800175e:	d11a      	bne.n	8001796 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001760:	4b4c      	ldr	r3, [pc, #304]	; (8001894 <HAL_RCC_OscConfig+0x938>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a4b      	ldr	r2, [pc, #300]	; (8001894 <HAL_RCC_OscConfig+0x938>)
 8001766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176c:	f7ff f8c0 	bl	80008f0 <HAL_GetTick>
 8001770:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001774:	e009      	b.n	800178a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001776:	f7ff f8bb 	bl	80008f0 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b64      	cmp	r3, #100	; 0x64
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e2e9      	b.n	8001d5e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178a:	4b42      	ldr	r3, [pc, #264]	; (8001894 <HAL_RCC_OscConfig+0x938>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0ef      	beq.n	8001776 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d106      	bne.n	80017ae <HAL_RCC_OscConfig+0x852>
 80017a0:	4b3a      	ldr	r3, [pc, #232]	; (800188c <HAL_RCC_OscConfig+0x930>)
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	4a39      	ldr	r2, [pc, #228]	; (800188c <HAL_RCC_OscConfig+0x930>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6213      	str	r3, [r2, #32]
 80017ac:	e02f      	b.n	800180e <HAL_RCC_OscConfig+0x8b2>
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d10c      	bne.n	80017d2 <HAL_RCC_OscConfig+0x876>
 80017b8:	4b34      	ldr	r3, [pc, #208]	; (800188c <HAL_RCC_OscConfig+0x930>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	4a33      	ldr	r2, [pc, #204]	; (800188c <HAL_RCC_OscConfig+0x930>)
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	6213      	str	r3, [r2, #32]
 80017c4:	4b31      	ldr	r3, [pc, #196]	; (800188c <HAL_RCC_OscConfig+0x930>)
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	4a30      	ldr	r2, [pc, #192]	; (800188c <HAL_RCC_OscConfig+0x930>)
 80017ca:	f023 0304 	bic.w	r3, r3, #4
 80017ce:	6213      	str	r3, [r2, #32]
 80017d0:	e01d      	b.n	800180e <HAL_RCC_OscConfig+0x8b2>
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	2b05      	cmp	r3, #5
 80017da:	d10c      	bne.n	80017f6 <HAL_RCC_OscConfig+0x89a>
 80017dc:	4b2b      	ldr	r3, [pc, #172]	; (800188c <HAL_RCC_OscConfig+0x930>)
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4a2a      	ldr	r2, [pc, #168]	; (800188c <HAL_RCC_OscConfig+0x930>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	6213      	str	r3, [r2, #32]
 80017e8:	4b28      	ldr	r3, [pc, #160]	; (800188c <HAL_RCC_OscConfig+0x930>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4a27      	ldr	r2, [pc, #156]	; (800188c <HAL_RCC_OscConfig+0x930>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6213      	str	r3, [r2, #32]
 80017f4:	e00b      	b.n	800180e <HAL_RCC_OscConfig+0x8b2>
 80017f6:	4b25      	ldr	r3, [pc, #148]	; (800188c <HAL_RCC_OscConfig+0x930>)
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	4a24      	ldr	r2, [pc, #144]	; (800188c <HAL_RCC_OscConfig+0x930>)
 80017fc:	f023 0301 	bic.w	r3, r3, #1
 8001800:	6213      	str	r3, [r2, #32]
 8001802:	4b22      	ldr	r3, [pc, #136]	; (800188c <HAL_RCC_OscConfig+0x930>)
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	4a21      	ldr	r2, [pc, #132]	; (800188c <HAL_RCC_OscConfig+0x930>)
 8001808:	f023 0304 	bic.w	r3, r3, #4
 800180c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d06b      	beq.n	80018f0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001818:	f7ff f86a 	bl	80008f0 <HAL_GetTick>
 800181c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001820:	e00b      	b.n	800183a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001822:	f7ff f865 	bl	80008f0 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e291      	b.n	8001d5e <HAL_RCC_OscConfig+0xe02>
 800183a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800183e:	2202      	movs	r2, #2
 8001840:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001842:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	fa93 f2a3 	rbit	r2, r3
 800184c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001856:	2202      	movs	r2, #2
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	fa93 f2a3 	rbit	r2, r3
 8001864:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001868:	601a      	str	r2, [r3, #0]
  return result;
 800186a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800186e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001870:	fab3 f383 	clz	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	095b      	lsrs	r3, r3, #5
 8001878:	b2db      	uxtb	r3, r3
 800187a:	f043 0302 	orr.w	r3, r3, #2
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d109      	bne.n	8001898 <HAL_RCC_OscConfig+0x93c>
 8001884:	4b01      	ldr	r3, [pc, #4]	; (800188c <HAL_RCC_OscConfig+0x930>)
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	e014      	b.n	80018b4 <HAL_RCC_OscConfig+0x958>
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000
 8001890:	10908120 	.word	0x10908120
 8001894:	40007000 	.word	0x40007000
 8001898:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800189c:	2202      	movs	r2, #2
 800189e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	fa93 f2a3 	rbit	r2, r3
 80018aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	4bbb      	ldr	r3, [pc, #748]	; (8001ba0 <HAL_RCC_OscConfig+0xc44>)
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80018b8:	2102      	movs	r1, #2
 80018ba:	6011      	str	r1, [r2, #0]
 80018bc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	fa92 f1a2 	rbit	r1, r2
 80018c6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80018ca:	6011      	str	r1, [r2, #0]
  return result;
 80018cc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	fab2 f282 	clz	r2, r2
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	f002 021f 	and.w	r2, r2, #31
 80018e2:	2101      	movs	r1, #1
 80018e4:	fa01 f202 	lsl.w	r2, r1, r2
 80018e8:	4013      	ands	r3, r2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d099      	beq.n	8001822 <HAL_RCC_OscConfig+0x8c6>
 80018ee:	e063      	b.n	80019b8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f0:	f7fe fffe 	bl	80008f0 <HAL_GetTick>
 80018f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f8:	e00b      	b.n	8001912 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fa:	f7fe fff9 	bl	80008f0 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	f241 3288 	movw	r2, #5000	; 0x1388
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e225      	b.n	8001d5e <HAL_RCC_OscConfig+0xe02>
 8001912:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001916:	2202      	movs	r2, #2
 8001918:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	fa93 f2a3 	rbit	r2, r3
 8001924:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800192e:	2202      	movs	r2, #2
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	fa93 f2a3 	rbit	r2, r3
 800193c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001940:	601a      	str	r2, [r3, #0]
  return result;
 8001942:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001946:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001948:	fab3 f383 	clz	r3, r3
 800194c:	b2db      	uxtb	r3, r3
 800194e:	095b      	lsrs	r3, r3, #5
 8001950:	b2db      	uxtb	r3, r3
 8001952:	f043 0302 	orr.w	r3, r3, #2
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d102      	bne.n	8001962 <HAL_RCC_OscConfig+0xa06>
 800195c:	4b90      	ldr	r3, [pc, #576]	; (8001ba0 <HAL_RCC_OscConfig+0xc44>)
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	e00d      	b.n	800197e <HAL_RCC_OscConfig+0xa22>
 8001962:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001966:	2202      	movs	r2, #2
 8001968:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	fa93 f2a3 	rbit	r2, r3
 8001974:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	4b89      	ldr	r3, [pc, #548]	; (8001ba0 <HAL_RCC_OscConfig+0xc44>)
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001982:	2102      	movs	r1, #2
 8001984:	6011      	str	r1, [r2, #0]
 8001986:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	fa92 f1a2 	rbit	r1, r2
 8001990:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001994:	6011      	str	r1, [r2, #0]
  return result;
 8001996:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	fab2 f282 	clz	r2, r2
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	f002 021f 	and.w	r2, r2, #31
 80019ac:	2101      	movs	r1, #1
 80019ae:	fa01 f202 	lsl.w	r2, r1, r2
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1a0      	bne.n	80018fa <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019b8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d105      	bne.n	80019cc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c0:	4b77      	ldr	r3, [pc, #476]	; (8001ba0 <HAL_RCC_OscConfig+0xc44>)
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	4a76      	ldr	r2, [pc, #472]	; (8001ba0 <HAL_RCC_OscConfig+0xc44>)
 80019c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 81c2 	beq.w	8001d5c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019d8:	4b71      	ldr	r3, [pc, #452]	; (8001ba0 <HAL_RCC_OscConfig+0xc44>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 030c 	and.w	r3, r3, #12
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	f000 819c 	beq.w	8001d1e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	f040 8114 	bne.w	8001c1a <HAL_RCC_OscConfig+0xcbe>
 80019f2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80019f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	fa93 f2a3 	rbit	r2, r3
 8001a06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a0a:	601a      	str	r2, [r3, #0]
  return result;
 8001a0c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a10:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a12:	fab3 f383 	clz	r3, r3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	461a      	mov	r2, r3
 8001a24:	2300      	movs	r3, #0
 8001a26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7fe ff62 	bl	80008f0 <HAL_GetTick>
 8001a2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a30:	e009      	b.n	8001a46 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a32:	f7fe ff5d 	bl	80008f0 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e18b      	b.n	8001d5e <HAL_RCC_OscConfig+0xe02>
 8001a46:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a50:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	fa93 f2a3 	rbit	r2, r3
 8001a5a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a5e:	601a      	str	r2, [r3, #0]
  return result;
 8001a60:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a66:	fab3 f383 	clz	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	095b      	lsrs	r3, r3, #5
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d102      	bne.n	8001a80 <HAL_RCC_OscConfig+0xb24>
 8001a7a:	4b49      	ldr	r3, [pc, #292]	; (8001ba0 <HAL_RCC_OscConfig+0xc44>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	e01b      	b.n	8001ab8 <HAL_RCC_OscConfig+0xb5c>
 8001a80:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	fa93 f2a3 	rbit	r2, r3
 8001a94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	fa93 f2a3 	rbit	r2, r3
 8001aae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	4b3a      	ldr	r3, [pc, #232]	; (8001ba0 <HAL_RCC_OscConfig+0xc44>)
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001abc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ac0:	6011      	str	r1, [r2, #0]
 8001ac2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	fa92 f1a2 	rbit	r1, r2
 8001acc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ad0:	6011      	str	r1, [r2, #0]
  return result;
 8001ad2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	fab2 f282 	clz	r2, r2
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	f042 0220 	orr.w	r2, r2, #32
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	f002 021f 	and.w	r2, r2, #31
 8001ae8:	2101      	movs	r1, #1
 8001aea:	fa01 f202 	lsl.w	r2, r1, r2
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d19e      	bne.n	8001a32 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af4:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <HAL_RCC_OscConfig+0xc44>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	4925      	ldr	r1, [pc, #148]	; (8001ba0 <HAL_RCC_OscConfig+0xc44>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
 8001b10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	fa93 f2a3 	rbit	r2, r3
 8001b24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b28:	601a      	str	r2, [r3, #0]
  return result;
 8001b2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b2e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b30:	fab3 f383 	clz	r3, r3
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	461a      	mov	r2, r3
 8001b42:	2301      	movs	r3, #1
 8001b44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7fe fed3 	bl	80008f0 <HAL_GetTick>
 8001b4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b4e:	e009      	b.n	8001b64 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b50:	f7fe fece 	bl	80008f0 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e0fc      	b.n	8001d5e <HAL_RCC_OscConfig+0xe02>
 8001b64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	fa93 f2a3 	rbit	r2, r3
 8001b78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b7c:	601a      	str	r2, [r3, #0]
  return result;
 8001b7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b84:	fab3 f383 	clz	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	095b      	lsrs	r3, r3, #5
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d105      	bne.n	8001ba4 <HAL_RCC_OscConfig+0xc48>
 8001b98:	4b01      	ldr	r3, [pc, #4]	; (8001ba0 <HAL_RCC_OscConfig+0xc44>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	e01e      	b.n	8001bdc <HAL_RCC_OscConfig+0xc80>
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ba8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	fa93 f2a3 	rbit	r2, r3
 8001bb8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	fa93 f2a3 	rbit	r2, r3
 8001bd2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	4b63      	ldr	r3, [pc, #396]	; (8001d68 <HAL_RCC_OscConfig+0xe0c>)
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001be0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001be4:	6011      	str	r1, [r2, #0]
 8001be6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	fa92 f1a2 	rbit	r1, r2
 8001bf0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001bf4:	6011      	str	r1, [r2, #0]
  return result;
 8001bf6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	fab2 f282 	clz	r2, r2
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	f042 0220 	orr.w	r2, r2, #32
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	f002 021f 	and.w	r2, r2, #31
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d09b      	beq.n	8001b50 <HAL_RCC_OscConfig+0xbf4>
 8001c18:	e0a0      	b.n	8001d5c <HAL_RCC_OscConfig+0xe00>
 8001c1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	fa93 f2a3 	rbit	r2, r3
 8001c2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c32:	601a      	str	r2, [r3, #0]
  return result;
 8001c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c38:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3a:	fab3 f383 	clz	r3, r3
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7fe fe4e 	bl	80008f0 <HAL_GetTick>
 8001c54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c58:	e009      	b.n	8001c6e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7fe fe49 	bl	80008f0 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e077      	b.n	8001d5e <HAL_RCC_OscConfig+0xe02>
 8001c6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	fa93 f2a3 	rbit	r2, r3
 8001c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c86:	601a      	str	r2, [r3, #0]
  return result;
 8001c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8e:	fab3 f383 	clz	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	095b      	lsrs	r3, r3, #5
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d102      	bne.n	8001ca8 <HAL_RCC_OscConfig+0xd4c>
 8001ca2:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <HAL_RCC_OscConfig+0xe0c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	e01b      	b.n	8001ce0 <HAL_RCC_OscConfig+0xd84>
 8001ca8:	f107 0320 	add.w	r3, r7, #32
 8001cac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	f107 0320 	add.w	r3, r7, #32
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	fa93 f2a3 	rbit	r2, r3
 8001cbc:	f107 031c 	add.w	r3, r7, #28
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	f107 0318 	add.w	r3, r7, #24
 8001cc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	f107 0318 	add.w	r3, r7, #24
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	fa93 f2a3 	rbit	r2, r3
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <HAL_RCC_OscConfig+0xe0c>)
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	f107 0210 	add.w	r2, r7, #16
 8001ce4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ce8:	6011      	str	r1, [r2, #0]
 8001cea:	f107 0210 	add.w	r2, r7, #16
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	fa92 f1a2 	rbit	r1, r2
 8001cf4:	f107 020c 	add.w	r2, r7, #12
 8001cf8:	6011      	str	r1, [r2, #0]
  return result;
 8001cfa:	f107 020c 	add.w	r2, r7, #12
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	fab2 f282 	clz	r2, r2
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	f042 0220 	orr.w	r2, r2, #32
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	f002 021f 	and.w	r2, r2, #31
 8001d10:	2101      	movs	r1, #1
 8001d12:	fa01 f202 	lsl.w	r2, r1, r2
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d19e      	bne.n	8001c5a <HAL_RCC_OscConfig+0xcfe>
 8001d1c:	e01e      	b.n	8001d5c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e018      	b.n	8001d5e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d2c:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <HAL_RCC_OscConfig+0xe0c>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d34:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d108      	bne.n	8001d58 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d46:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d4e:	1d3b      	adds	r3, r7, #4
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000

08001d6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b09e      	sub	sp, #120	; 0x78
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e162      	b.n	800204a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d84:	4b90      	ldr	r3, [pc, #576]	; (8001fc8 <HAL_RCC_ClockConfig+0x25c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d910      	bls.n	8001db4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d92:	4b8d      	ldr	r3, [pc, #564]	; (8001fc8 <HAL_RCC_ClockConfig+0x25c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 0207 	bic.w	r2, r3, #7
 8001d9a:	498b      	ldr	r1, [pc, #556]	; (8001fc8 <HAL_RCC_ClockConfig+0x25c>)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da2:	4b89      	ldr	r3, [pc, #548]	; (8001fc8 <HAL_RCC_ClockConfig+0x25c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d001      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e14a      	b.n	800204a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d008      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc0:	4b82      	ldr	r3, [pc, #520]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	497f      	ldr	r1, [pc, #508]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80dc 	beq.w	8001f98 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d13c      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xf6>
 8001de8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df8:	fab3 f383 	clz	r3, r3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d102      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xa6>
 8001e0c:	4b6f      	ldr	r3, [pc, #444]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	e00f      	b.n	8001e32 <HAL_RCC_ClockConfig+0xc6>
 8001e12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	667b      	str	r3, [r7, #100]	; 0x64
 8001e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e24:	663b      	str	r3, [r7, #96]	; 0x60
 8001e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e2e:	4b67      	ldr	r3, [pc, #412]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e36:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e3a:	fa92 f2a2 	rbit	r2, r2
 8001e3e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e42:	fab2 f282 	clz	r2, r2
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	f042 0220 	orr.w	r2, r2, #32
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	f002 021f 	and.w	r2, r2, #31
 8001e52:	2101      	movs	r1, #1
 8001e54:	fa01 f202 	lsl.w	r2, r1, r2
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d17b      	bne.n	8001f56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e0f3      	b.n	800204a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d13c      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x178>
 8001e6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e7a:	fab3 f383 	clz	r3, r3
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	095b      	lsrs	r3, r3, #5
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d102      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x128>
 8001e8e:	4b4f      	ldr	r3, [pc, #316]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	e00f      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x148>
 8001e94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e98:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ea2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ea6:	643b      	str	r3, [r7, #64]	; 0x40
 8001ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eb0:	4b46      	ldr	r3, [pc, #280]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eb8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001eba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ebc:	fa92 f2a2 	rbit	r2, r2
 8001ec0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ec4:	fab2 f282 	clz	r2, r2
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	f042 0220 	orr.w	r2, r2, #32
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	f002 021f 	and.w	r2, r2, #31
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d13a      	bne.n	8001f56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0b2      	b.n	800204a <HAL_RCC_ClockConfig+0x2de>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	095b      	lsrs	r3, r3, #5
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d102      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x1a0>
 8001f06:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	e00d      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1bc>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
 8001f18:	2302      	movs	r3, #2
 8001f1a:	623b      	str	r3, [r7, #32]
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	61fb      	str	r3, [r7, #28]
 8001f24:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	2202      	movs	r2, #2
 8001f2a:	61ba      	str	r2, [r7, #24]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	fa92 f2a2 	rbit	r2, r2
 8001f32:	617a      	str	r2, [r7, #20]
  return result;
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	fab2 f282 	clz	r2, r2
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	f042 0220 	orr.w	r2, r2, #32
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	f002 021f 	and.w	r2, r2, #31
 8001f46:	2101      	movs	r1, #1
 8001f48:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e079      	b.n	800204a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f56:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f023 0203 	bic.w	r2, r3, #3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	491a      	ldr	r1, [pc, #104]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f68:	f7fe fcc2 	bl	80008f0 <HAL_GetTick>
 8001f6c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	e00a      	b.n	8001f86 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f70:	f7fe fcbe 	bl	80008f0 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e061      	b.n	800204a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f86:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <HAL_RCC_ClockConfig+0x260>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 020c 	and.w	r2, r3, #12
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d1eb      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_RCC_ClockConfig+0x25c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d214      	bcs.n	8001fd0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <HAL_RCC_ClockConfig+0x25c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 0207 	bic.w	r2, r3, #7
 8001fae:	4906      	ldr	r1, [pc, #24]	; (8001fc8 <HAL_RCC_ClockConfig+0x25c>)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <HAL_RCC_ClockConfig+0x25c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e040      	b.n	800204a <HAL_RCC_ClockConfig+0x2de>
 8001fc8:	40022000 	.word	0x40022000
 8001fcc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d008      	beq.n	8001fee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <HAL_RCC_ClockConfig+0x2e8>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	491a      	ldr	r1, [pc, #104]	; (8002054 <HAL_RCC_ClockConfig+0x2e8>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d009      	beq.n	800200e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ffa:	4b16      	ldr	r3, [pc, #88]	; (8002054 <HAL_RCC_ClockConfig+0x2e8>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4912      	ldr	r1, [pc, #72]	; (8002054 <HAL_RCC_ClockConfig+0x2e8>)
 800200a:	4313      	orrs	r3, r2
 800200c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800200e:	f000 f829 	bl	8002064 <HAL_RCC_GetSysClockFreq>
 8002012:	4601      	mov	r1, r0
 8002014:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <HAL_RCC_ClockConfig+0x2e8>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800201c:	22f0      	movs	r2, #240	; 0xf0
 800201e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	fa92 f2a2 	rbit	r2, r2
 8002026:	60fa      	str	r2, [r7, #12]
  return result;
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	fab2 f282 	clz	r2, r2
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	40d3      	lsrs	r3, r2
 8002032:	4a09      	ldr	r2, [pc, #36]	; (8002058 <HAL_RCC_ClockConfig+0x2ec>)
 8002034:	5cd3      	ldrb	r3, [r2, r3]
 8002036:	fa21 f303 	lsr.w	r3, r1, r3
 800203a:	4a08      	ldr	r2, [pc, #32]	; (800205c <HAL_RCC_ClockConfig+0x2f0>)
 800203c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800203e:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_RCC_ClockConfig+0x2f4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe fc10 	bl	8000868 <HAL_InitTick>
  
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3778      	adds	r7, #120	; 0x78
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000
 8002058:	080046d4 	.word	0x080046d4
 800205c:	20000004 	.word	0x20000004
 8002060:	20000008 	.word	0x20000008

08002064 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002064:	b480      	push	{r7}
 8002066:	b08b      	sub	sp, #44	; 0x2c
 8002068:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	2300      	movs	r3, #0
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	2300      	movs	r3, #0
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800207e:	4b29      	ldr	r3, [pc, #164]	; (8002124 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b04      	cmp	r3, #4
 800208c:	d002      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x30>
 800208e:	2b08      	cmp	r3, #8
 8002090:	d003      	beq.n	800209a <HAL_RCC_GetSysClockFreq+0x36>
 8002092:	e03c      	b.n	800210e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002094:	4b24      	ldr	r3, [pc, #144]	; (8002128 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002096:	623b      	str	r3, [r7, #32]
      break;
 8002098:	e03c      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020a0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020a4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	fa92 f2a2 	rbit	r2, r2
 80020ac:	607a      	str	r2, [r7, #4]
  return result;
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	fab2 f282 	clz	r2, r2
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	40d3      	lsrs	r3, r2
 80020b8:	4a1c      	ldr	r2, [pc, #112]	; (800212c <HAL_RCC_GetSysClockFreq+0xc8>)
 80020ba:	5cd3      	ldrb	r3, [r2, r3]
 80020bc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020be:	4b19      	ldr	r3, [pc, #100]	; (8002124 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	220f      	movs	r2, #15
 80020c8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	fa92 f2a2 	rbit	r2, r2
 80020d0:	60fa      	str	r2, [r7, #12]
  return result;
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	fab2 f282 	clz	r2, r2
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	40d3      	lsrs	r3, r2
 80020dc:	4a14      	ldr	r2, [pc, #80]	; (8002130 <HAL_RCC_GetSysClockFreq+0xcc>)
 80020de:	5cd3      	ldrb	r3, [r2, r3]
 80020e0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020ec:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	fb02 f303 	mul.w	r3, r2, r3
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
 80020fc:	e004      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	4a0c      	ldr	r2, [pc, #48]	; (8002134 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002102:	fb02 f303 	mul.w	r3, r2, r3
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	623b      	str	r3, [r7, #32]
      break;
 800210c:	e002      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002110:	623b      	str	r3, [r7, #32]
      break;
 8002112:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002114:	6a3b      	ldr	r3, [r7, #32]
}
 8002116:	4618      	mov	r0, r3
 8002118:	372c      	adds	r7, #44	; 0x2c
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	007a1200 	.word	0x007a1200
 800212c:	080046ec 	.word	0x080046ec
 8002130:	080046fc 	.word	0x080046fc
 8002134:	003d0900 	.word	0x003d0900

08002138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <HAL_RCC_GetHCLKFreq+0x14>)
 800213e:	681b      	ldr	r3, [r3, #0]
}
 8002140:	4618      	mov	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	20000004 	.word	0x20000004

08002150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002156:	f7ff ffef 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 800215a:	4601      	mov	r1, r0
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002164:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002168:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	fa92 f2a2 	rbit	r2, r2
 8002170:	603a      	str	r2, [r7, #0]
  return result;
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	fab2 f282 	clz	r2, r2
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	40d3      	lsrs	r3, r2
 800217c:	4a04      	ldr	r2, [pc, #16]	; (8002190 <HAL_RCC_GetPCLK1Freq+0x40>)
 800217e:	5cd3      	ldrb	r3, [r2, r3]
 8002180:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	080046e4 	.word	0x080046e4

08002194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800219a:	f7ff ffcd 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 800219e:	4601      	mov	r1, r0
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021a8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	fa92 f2a2 	rbit	r2, r2
 80021b4:	603a      	str	r2, [r7, #0]
  return result;
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	fab2 f282 	clz	r2, r2
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	40d3      	lsrs	r3, r2
 80021c0:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80021c2:	5cd3      	ldrb	r3, [r2, r3]
 80021c4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40021000 	.word	0x40021000
 80021d4:	080046e4 	.word	0x080046e4

080021d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b092      	sub	sp, #72	; 0x48
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 80cd 	beq.w	8002396 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fc:	4b86      	ldr	r3, [pc, #536]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10e      	bne.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002208:	4b83      	ldr	r3, [pc, #524]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	4a82      	ldr	r2, [pc, #520]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800220e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002212:	61d3      	str	r3, [r2, #28]
 8002214:	4b80      	ldr	r3, [pc, #512]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002220:	2301      	movs	r3, #1
 8002222:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002226:	4b7d      	ldr	r3, [pc, #500]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222e:	2b00      	cmp	r3, #0
 8002230:	d118      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002232:	4b7a      	ldr	r3, [pc, #488]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a79      	ldr	r2, [pc, #484]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223e:	f7fe fb57 	bl	80008f0 <HAL_GetTick>
 8002242:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002244:	e008      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002246:	f7fe fb53 	bl	80008f0 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b64      	cmp	r3, #100	; 0x64
 8002252:	d901      	bls.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e0db      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002258:	4b70      	ldr	r3, [pc, #448]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002264:	4b6c      	ldr	r3, [pc, #432]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800226e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002270:	2b00      	cmp	r3, #0
 8002272:	d07d      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800227e:	429a      	cmp	r2, r3
 8002280:	d076      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002282:	4b65      	ldr	r3, [pc, #404]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800228c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002290:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002294:	fa93 f3a3 	rbit	r3, r3
 8002298:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800229a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800229c:	fab3 f383 	clz	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	461a      	mov	r2, r3
 80022a4:	4b5e      	ldr	r3, [pc, #376]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022a6:	4413      	add	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	461a      	mov	r2, r3
 80022ac:	2301      	movs	r3, #1
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022c0:	fab3 f383 	clz	r3, r3
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	461a      	mov	r2, r3
 80022c8:	4b55      	ldr	r3, [pc, #340]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022ca:	4413      	add	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	461a      	mov	r2, r3
 80022d0:	2300      	movs	r3, #0
 80022d2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022d4:	4a50      	ldr	r2, [pc, #320]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80022d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d045      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7fe fb04 	bl	80008f0 <HAL_GetTick>
 80022e8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ea:	e00a      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ec:	f7fe fb00 	bl	80008f0 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e086      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002302:	2302      	movs	r3, #2
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
 800230e:	2302      	movs	r3, #2
 8002310:	623b      	str	r3, [r7, #32]
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	61fb      	str	r3, [r7, #28]
  return result;
 800231a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800231c:	fab3 f383 	clz	r3, r3
 8002320:	b2db      	uxtb	r3, r3
 8002322:	095b      	lsrs	r3, r3, #5
 8002324:	b2db      	uxtb	r3, r3
 8002326:	f043 0302 	orr.w	r3, r3, #2
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d102      	bne.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002330:	4b39      	ldr	r3, [pc, #228]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	e007      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002336:	2302      	movs	r3, #2
 8002338:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	fa93 f3a3 	rbit	r3, r3
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	4b35      	ldr	r3, [pc, #212]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	2202      	movs	r2, #2
 8002348:	613a      	str	r2, [r7, #16]
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	fa92 f2a2 	rbit	r2, r2
 8002350:	60fa      	str	r2, [r7, #12]
  return result;
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	fab2 f282 	clz	r2, r2
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	f002 021f 	and.w	r2, r2, #31
 8002364:	2101      	movs	r1, #1
 8002366:	fa01 f202 	lsl.w	r2, r1, r2
 800236a:	4013      	ands	r3, r2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0bd      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002370:	4b29      	ldr	r3, [pc, #164]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	4926      	ldr	r1, [pc, #152]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800237e:	4313      	orrs	r3, r2
 8002380:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002382:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002386:	2b01      	cmp	r3, #1
 8002388:	d105      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800238a:	4b23      	ldr	r3, [pc, #140]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	4a22      	ldr	r2, [pc, #136]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002394:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d008      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023a2:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f023 0203 	bic.w	r2, r3, #3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	491a      	ldr	r1, [pc, #104]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0320 	and.w	r3, r3, #32
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023c0:	4b15      	ldr	r3, [pc, #84]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c4:	f023 0210 	bic.w	r2, r3, #16
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4912      	ldr	r1, [pc, #72]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d008      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	490b      	ldr	r1, [pc, #44]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	4903      	ldr	r1, [pc, #12]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800240a:	4313      	orrs	r3, r2
 800240c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3748      	adds	r7, #72	; 0x48
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40021000 	.word	0x40021000
 800241c:	40007000 	.word	0x40007000
 8002420:	10908100 	.word	0x10908100

08002424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e049      	b.n	80024ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d106      	bne.n	8002450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7fe f8e8 	bl	8000620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3304      	adds	r3, #4
 8002460:	4619      	mov	r1, r3
 8002462:	4610      	mov	r0, r2
 8002464:	f000 fb60 	bl	8002b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e049      	b.n	8002578 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d106      	bne.n	80024fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f841 	bl	8002580 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2202      	movs	r2, #2
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3304      	adds	r3, #4
 800250e:	4619      	mov	r1, r3
 8002510:	4610      	mov	r0, r2
 8002512:	f000 fb09 	bl	8002b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d109      	bne.n	80025b8 <HAL_TIM_PWM_Start+0x24>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	bf14      	ite	ne
 80025b0:	2301      	movne	r3, #1
 80025b2:	2300      	moveq	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	e03c      	b.n	8002632 <HAL_TIM_PWM_Start+0x9e>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d109      	bne.n	80025d2 <HAL_TIM_PWM_Start+0x3e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	bf14      	ite	ne
 80025ca:	2301      	movne	r3, #1
 80025cc:	2300      	moveq	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	e02f      	b.n	8002632 <HAL_TIM_PWM_Start+0x9e>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d109      	bne.n	80025ec <HAL_TIM_PWM_Start+0x58>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	bf14      	ite	ne
 80025e4:	2301      	movne	r3, #1
 80025e6:	2300      	moveq	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	e022      	b.n	8002632 <HAL_TIM_PWM_Start+0x9e>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	2b0c      	cmp	r3, #12
 80025f0:	d109      	bne.n	8002606 <HAL_TIM_PWM_Start+0x72>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	bf14      	ite	ne
 80025fe:	2301      	movne	r3, #1
 8002600:	2300      	moveq	r3, #0
 8002602:	b2db      	uxtb	r3, r3
 8002604:	e015      	b.n	8002632 <HAL_TIM_PWM_Start+0x9e>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b10      	cmp	r3, #16
 800260a:	d109      	bne.n	8002620 <HAL_TIM_PWM_Start+0x8c>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b01      	cmp	r3, #1
 8002616:	bf14      	ite	ne
 8002618:	2301      	movne	r3, #1
 800261a:	2300      	moveq	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	e008      	b.n	8002632 <HAL_TIM_PWM_Start+0x9e>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b01      	cmp	r3, #1
 800262a:	bf14      	ite	ne
 800262c:	2301      	movne	r3, #1
 800262e:	2300      	moveq	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e088      	b.n	800274c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d104      	bne.n	800264a <HAL_TIM_PWM_Start+0xb6>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002648:	e023      	b.n	8002692 <HAL_TIM_PWM_Start+0xfe>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b04      	cmp	r3, #4
 800264e:	d104      	bne.n	800265a <HAL_TIM_PWM_Start+0xc6>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002658:	e01b      	b.n	8002692 <HAL_TIM_PWM_Start+0xfe>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b08      	cmp	r3, #8
 800265e:	d104      	bne.n	800266a <HAL_TIM_PWM_Start+0xd6>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002668:	e013      	b.n	8002692 <HAL_TIM_PWM_Start+0xfe>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	2b0c      	cmp	r3, #12
 800266e:	d104      	bne.n	800267a <HAL_TIM_PWM_Start+0xe6>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002678:	e00b      	b.n	8002692 <HAL_TIM_PWM_Start+0xfe>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b10      	cmp	r3, #16
 800267e:	d104      	bne.n	800268a <HAL_TIM_PWM_Start+0xf6>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002688:	e003      	b.n	8002692 <HAL_TIM_PWM_Start+0xfe>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2202      	movs	r2, #2
 800268e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2201      	movs	r2, #1
 8002698:	6839      	ldr	r1, [r7, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f000 fdfc 	bl	8003298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a2b      	ldr	r2, [pc, #172]	; (8002754 <HAL_TIM_PWM_Start+0x1c0>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d00e      	beq.n	80026c8 <HAL_TIM_PWM_Start+0x134>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a2a      	ldr	r2, [pc, #168]	; (8002758 <HAL_TIM_PWM_Start+0x1c4>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d009      	beq.n	80026c8 <HAL_TIM_PWM_Start+0x134>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a28      	ldr	r2, [pc, #160]	; (800275c <HAL_TIM_PWM_Start+0x1c8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d004      	beq.n	80026c8 <HAL_TIM_PWM_Start+0x134>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a27      	ldr	r2, [pc, #156]	; (8002760 <HAL_TIM_PWM_Start+0x1cc>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d101      	bne.n	80026cc <HAL_TIM_PWM_Start+0x138>
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <HAL_TIM_PWM_Start+0x13a>
 80026cc:	2300      	movs	r3, #0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d007      	beq.n	80026e2 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a1b      	ldr	r2, [pc, #108]	; (8002754 <HAL_TIM_PWM_Start+0x1c0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d00e      	beq.n	800270a <HAL_TIM_PWM_Start+0x176>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f4:	d009      	beq.n	800270a <HAL_TIM_PWM_Start+0x176>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a1a      	ldr	r2, [pc, #104]	; (8002764 <HAL_TIM_PWM_Start+0x1d0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d004      	beq.n	800270a <HAL_TIM_PWM_Start+0x176>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a14      	ldr	r2, [pc, #80]	; (8002758 <HAL_TIM_PWM_Start+0x1c4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d115      	bne.n	8002736 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	4b15      	ldr	r3, [pc, #84]	; (8002768 <HAL_TIM_PWM_Start+0x1d4>)
 8002712:	4013      	ands	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b06      	cmp	r3, #6
 800271a:	d015      	beq.n	8002748 <HAL_TIM_PWM_Start+0x1b4>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002722:	d011      	beq.n	8002748 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002734:	e008      	b.n	8002748 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0201 	orr.w	r2, r2, #1
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	e000      	b.n	800274a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002748:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40012c00 	.word	0x40012c00
 8002758:	40014000 	.word	0x40014000
 800275c:	40014400 	.word	0x40014400
 8002760:	40014800 	.word	0x40014800
 8002764:	40000400 	.word	0x40000400
 8002768:	00010007 	.word	0x00010007

0800276c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002786:	2302      	movs	r3, #2
 8002788:	e0ff      	b.n	800298a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b14      	cmp	r3, #20
 8002796:	f200 80f0 	bhi.w	800297a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800279a:	a201      	add	r2, pc, #4	; (adr r2, 80027a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800279c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a0:	080027f5 	.word	0x080027f5
 80027a4:	0800297b 	.word	0x0800297b
 80027a8:	0800297b 	.word	0x0800297b
 80027ac:	0800297b 	.word	0x0800297b
 80027b0:	08002835 	.word	0x08002835
 80027b4:	0800297b 	.word	0x0800297b
 80027b8:	0800297b 	.word	0x0800297b
 80027bc:	0800297b 	.word	0x0800297b
 80027c0:	08002877 	.word	0x08002877
 80027c4:	0800297b 	.word	0x0800297b
 80027c8:	0800297b 	.word	0x0800297b
 80027cc:	0800297b 	.word	0x0800297b
 80027d0:	080028b7 	.word	0x080028b7
 80027d4:	0800297b 	.word	0x0800297b
 80027d8:	0800297b 	.word	0x0800297b
 80027dc:	0800297b 	.word	0x0800297b
 80027e0:	080028f9 	.word	0x080028f9
 80027e4:	0800297b 	.word	0x0800297b
 80027e8:	0800297b 	.word	0x0800297b
 80027ec:	0800297b 	.word	0x0800297b
 80027f0:	08002939 	.word	0x08002939
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fa0c 	bl	8002c18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699a      	ldr	r2, [r3, #24]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0208 	orr.w	r2, r2, #8
 800280e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699a      	ldr	r2, [r3, #24]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0204 	bic.w	r2, r2, #4
 800281e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6999      	ldr	r1, [r3, #24]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	619a      	str	r2, [r3, #24]
      break;
 8002832:	e0a5      	b.n	8002980 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	4618      	mov	r0, r3
 800283c:	f000 fa72 	bl	8002d24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800284e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699a      	ldr	r2, [r3, #24]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800285e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6999      	ldr	r1, [r3, #24]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	021a      	lsls	r2, r3, #8
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	619a      	str	r2, [r3, #24]
      break;
 8002874:	e084      	b.n	8002980 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68b9      	ldr	r1, [r7, #8]
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fad1 	bl	8002e24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	69da      	ldr	r2, [r3, #28]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0208 	orr.w	r2, r2, #8
 8002890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	69da      	ldr	r2, [r3, #28]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0204 	bic.w	r2, r2, #4
 80028a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	69d9      	ldr	r1, [r3, #28]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	61da      	str	r2, [r3, #28]
      break;
 80028b4:	e064      	b.n	8002980 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68b9      	ldr	r1, [r7, #8]
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fb2f 	bl	8002f20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69da      	ldr	r2, [r3, #28]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	69da      	ldr	r2, [r3, #28]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	69d9      	ldr	r1, [r3, #28]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	021a      	lsls	r2, r3, #8
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	61da      	str	r2, [r3, #28]
      break;
 80028f6:	e043      	b.n	8002980 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fb72 	bl	8002fe8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0208 	orr.w	r2, r2, #8
 8002912:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0204 	bic.w	r2, r2, #4
 8002922:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002936:	e023      	b.n	8002980 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	4618      	mov	r0, r3
 8002940:	f000 fbb0 	bl	80030a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002952:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002962:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	021a      	lsls	r2, r3, #8
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002978:	e002      	b.n	8002980 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	75fb      	strb	r3, [r7, #23]
      break;
 800297e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002988:	7dfb      	ldrb	r3, [r7, #23]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop

08002994 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_TIM_ConfigClockSource+0x1c>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e0b6      	b.n	8002b1e <HAL_TIM_ConfigClockSource+0x18a>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ec:	d03e      	beq.n	8002a6c <HAL_TIM_ConfigClockSource+0xd8>
 80029ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f2:	f200 8087 	bhi.w	8002b04 <HAL_TIM_ConfigClockSource+0x170>
 80029f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029fa:	f000 8086 	beq.w	8002b0a <HAL_TIM_ConfigClockSource+0x176>
 80029fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a02:	d87f      	bhi.n	8002b04 <HAL_TIM_ConfigClockSource+0x170>
 8002a04:	2b70      	cmp	r3, #112	; 0x70
 8002a06:	d01a      	beq.n	8002a3e <HAL_TIM_ConfigClockSource+0xaa>
 8002a08:	2b70      	cmp	r3, #112	; 0x70
 8002a0a:	d87b      	bhi.n	8002b04 <HAL_TIM_ConfigClockSource+0x170>
 8002a0c:	2b60      	cmp	r3, #96	; 0x60
 8002a0e:	d050      	beq.n	8002ab2 <HAL_TIM_ConfigClockSource+0x11e>
 8002a10:	2b60      	cmp	r3, #96	; 0x60
 8002a12:	d877      	bhi.n	8002b04 <HAL_TIM_ConfigClockSource+0x170>
 8002a14:	2b50      	cmp	r3, #80	; 0x50
 8002a16:	d03c      	beq.n	8002a92 <HAL_TIM_ConfigClockSource+0xfe>
 8002a18:	2b50      	cmp	r3, #80	; 0x50
 8002a1a:	d873      	bhi.n	8002b04 <HAL_TIM_ConfigClockSource+0x170>
 8002a1c:	2b40      	cmp	r3, #64	; 0x40
 8002a1e:	d058      	beq.n	8002ad2 <HAL_TIM_ConfigClockSource+0x13e>
 8002a20:	2b40      	cmp	r3, #64	; 0x40
 8002a22:	d86f      	bhi.n	8002b04 <HAL_TIM_ConfigClockSource+0x170>
 8002a24:	2b30      	cmp	r3, #48	; 0x30
 8002a26:	d064      	beq.n	8002af2 <HAL_TIM_ConfigClockSource+0x15e>
 8002a28:	2b30      	cmp	r3, #48	; 0x30
 8002a2a:	d86b      	bhi.n	8002b04 <HAL_TIM_ConfigClockSource+0x170>
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	d060      	beq.n	8002af2 <HAL_TIM_ConfigClockSource+0x15e>
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	d867      	bhi.n	8002b04 <HAL_TIM_ConfigClockSource+0x170>
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d05c      	beq.n	8002af2 <HAL_TIM_ConfigClockSource+0x15e>
 8002a38:	2b10      	cmp	r3, #16
 8002a3a:	d05a      	beq.n	8002af2 <HAL_TIM_ConfigClockSource+0x15e>
 8002a3c:	e062      	b.n	8002b04 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6899      	ldr	r1, [r3, #8]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f000 fc03 	bl	8003258 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	609a      	str	r2, [r3, #8]
      break;
 8002a6a:	e04f      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	6899      	ldr	r1, [r3, #8]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f000 fbec 	bl	8003258 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a8e:	609a      	str	r2, [r3, #8]
      break;
 8002a90:	e03c      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	6859      	ldr	r1, [r3, #4]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f000 fb60 	bl	8003164 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2150      	movs	r1, #80	; 0x50
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fbb9 	bl	8003222 <TIM_ITRx_SetConfig>
      break;
 8002ab0:	e02c      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	6859      	ldr	r1, [r3, #4]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	f000 fb7f 	bl	80031c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2160      	movs	r1, #96	; 0x60
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 fba9 	bl	8003222 <TIM_ITRx_SetConfig>
      break;
 8002ad0:	e01c      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6818      	ldr	r0, [r3, #0]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	6859      	ldr	r1, [r3, #4]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f000 fb40 	bl	8003164 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2140      	movs	r1, #64	; 0x40
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fb99 	bl	8003222 <TIM_ITRx_SetConfig>
      break;
 8002af0:	e00c      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4619      	mov	r1, r3
 8002afc:	4610      	mov	r0, r2
 8002afe:	f000 fb90 	bl	8003222 <TIM_ITRx_SetConfig>
      break;
 8002b02:	e003      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
      break;
 8002b08:	e000      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002b0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a32      	ldr	r2, [pc, #200]	; (8002c04 <TIM_Base_SetConfig+0xdc>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d007      	beq.n	8002b50 <TIM_Base_SetConfig+0x28>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b46:	d003      	beq.n	8002b50 <TIM_Base_SetConfig+0x28>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a2f      	ldr	r2, [pc, #188]	; (8002c08 <TIM_Base_SetConfig+0xe0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d108      	bne.n	8002b62 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a27      	ldr	r2, [pc, #156]	; (8002c04 <TIM_Base_SetConfig+0xdc>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d013      	beq.n	8002b92 <TIM_Base_SetConfig+0x6a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b70:	d00f      	beq.n	8002b92 <TIM_Base_SetConfig+0x6a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a24      	ldr	r2, [pc, #144]	; (8002c08 <TIM_Base_SetConfig+0xe0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00b      	beq.n	8002b92 <TIM_Base_SetConfig+0x6a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a23      	ldr	r2, [pc, #140]	; (8002c0c <TIM_Base_SetConfig+0xe4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d007      	beq.n	8002b92 <TIM_Base_SetConfig+0x6a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a22      	ldr	r2, [pc, #136]	; (8002c10 <TIM_Base_SetConfig+0xe8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d003      	beq.n	8002b92 <TIM_Base_SetConfig+0x6a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a21      	ldr	r2, [pc, #132]	; (8002c14 <TIM_Base_SetConfig+0xec>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d108      	bne.n	8002ba4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a0e      	ldr	r2, [pc, #56]	; (8002c04 <TIM_Base_SetConfig+0xdc>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d00b      	beq.n	8002be8 <TIM_Base_SetConfig+0xc0>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a0e      	ldr	r2, [pc, #56]	; (8002c0c <TIM_Base_SetConfig+0xe4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d007      	beq.n	8002be8 <TIM_Base_SetConfig+0xc0>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a0d      	ldr	r2, [pc, #52]	; (8002c10 <TIM_Base_SetConfig+0xe8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d003      	beq.n	8002be8 <TIM_Base_SetConfig+0xc0>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a0c      	ldr	r2, [pc, #48]	; (8002c14 <TIM_Base_SetConfig+0xec>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d103      	bne.n	8002bf0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	615a      	str	r2, [r3, #20]
}
 8002bf6:	bf00      	nop
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40012c00 	.word	0x40012c00
 8002c08:	40000400 	.word	0x40000400
 8002c0c:	40014000 	.word	0x40014000
 8002c10:	40014400 	.word	0x40014400
 8002c14:	40014800 	.word	0x40014800

08002c18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	f023 0201 	bic.w	r2, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f023 0303 	bic.w	r3, r3, #3
 8002c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f023 0302 	bic.w	r3, r3, #2
 8002c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a28      	ldr	r2, [pc, #160]	; (8002d14 <TIM_OC1_SetConfig+0xfc>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d00b      	beq.n	8002c90 <TIM_OC1_SetConfig+0x78>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a27      	ldr	r2, [pc, #156]	; (8002d18 <TIM_OC1_SetConfig+0x100>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d007      	beq.n	8002c90 <TIM_OC1_SetConfig+0x78>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a26      	ldr	r2, [pc, #152]	; (8002d1c <TIM_OC1_SetConfig+0x104>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d003      	beq.n	8002c90 <TIM_OC1_SetConfig+0x78>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a25      	ldr	r2, [pc, #148]	; (8002d20 <TIM_OC1_SetConfig+0x108>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d10c      	bne.n	8002caa <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f023 0308 	bic.w	r3, r3, #8
 8002c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f023 0304 	bic.w	r3, r3, #4
 8002ca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a19      	ldr	r2, [pc, #100]	; (8002d14 <TIM_OC1_SetConfig+0xfc>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00b      	beq.n	8002cca <TIM_OC1_SetConfig+0xb2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a18      	ldr	r2, [pc, #96]	; (8002d18 <TIM_OC1_SetConfig+0x100>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d007      	beq.n	8002cca <TIM_OC1_SetConfig+0xb2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a17      	ldr	r2, [pc, #92]	; (8002d1c <TIM_OC1_SetConfig+0x104>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d003      	beq.n	8002cca <TIM_OC1_SetConfig+0xb2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a16      	ldr	r2, [pc, #88]	; (8002d20 <TIM_OC1_SetConfig+0x108>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d111      	bne.n	8002cee <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	621a      	str	r2, [r3, #32]
}
 8002d08:	bf00      	nop
 8002d0a:	371c      	adds	r7, #28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	40012c00 	.word	0x40012c00
 8002d18:	40014000 	.word	0x40014000
 8002d1c:	40014400 	.word	0x40014400
 8002d20:	40014800 	.word	0x40014800

08002d24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	f023 0210 	bic.w	r2, r3, #16
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f023 0320 	bic.w	r3, r3, #32
 8002d72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a24      	ldr	r2, [pc, #144]	; (8002e14 <TIM_OC2_SetConfig+0xf0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d10d      	bne.n	8002da4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002da2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a1b      	ldr	r2, [pc, #108]	; (8002e14 <TIM_OC2_SetConfig+0xf0>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d00b      	beq.n	8002dc4 <TIM_OC2_SetConfig+0xa0>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a1a      	ldr	r2, [pc, #104]	; (8002e18 <TIM_OC2_SetConfig+0xf4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d007      	beq.n	8002dc4 <TIM_OC2_SetConfig+0xa0>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a19      	ldr	r2, [pc, #100]	; (8002e1c <TIM_OC2_SetConfig+0xf8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d003      	beq.n	8002dc4 <TIM_OC2_SetConfig+0xa0>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a18      	ldr	r2, [pc, #96]	; (8002e20 <TIM_OC2_SetConfig+0xfc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d113      	bne.n	8002dec <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dca:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dd2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	621a      	str	r2, [r3, #32]
}
 8002e06:	bf00      	nop
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40012c00 	.word	0x40012c00
 8002e18:	40014000 	.word	0x40014000
 8002e1c:	40014400 	.word	0x40014400
 8002e20:	40014800 	.word	0x40014800

08002e24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0303 	bic.w	r3, r3, #3
 8002e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	021b      	lsls	r3, r3, #8
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a23      	ldr	r2, [pc, #140]	; (8002f10 <TIM_OC3_SetConfig+0xec>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d10d      	bne.n	8002ea2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ea0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a1a      	ldr	r2, [pc, #104]	; (8002f10 <TIM_OC3_SetConfig+0xec>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d00b      	beq.n	8002ec2 <TIM_OC3_SetConfig+0x9e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a19      	ldr	r2, [pc, #100]	; (8002f14 <TIM_OC3_SetConfig+0xf0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d007      	beq.n	8002ec2 <TIM_OC3_SetConfig+0x9e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a18      	ldr	r2, [pc, #96]	; (8002f18 <TIM_OC3_SetConfig+0xf4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d003      	beq.n	8002ec2 <TIM_OC3_SetConfig+0x9e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a17      	ldr	r2, [pc, #92]	; (8002f1c <TIM_OC3_SetConfig+0xf8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d113      	bne.n	8002eea <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	621a      	str	r2, [r3, #32]
}
 8002f04:	bf00      	nop
 8002f06:	371c      	adds	r7, #28
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	40012c00 	.word	0x40012c00
 8002f14:	40014000 	.word	0x40014000
 8002f18:	40014400 	.word	0x40014400
 8002f1c:	40014800 	.word	0x40014800

08002f20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	021b      	lsls	r3, r3, #8
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	031b      	lsls	r3, r3, #12
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a16      	ldr	r2, [pc, #88]	; (8002fd8 <TIM_OC4_SetConfig+0xb8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00b      	beq.n	8002f9c <TIM_OC4_SetConfig+0x7c>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a15      	ldr	r2, [pc, #84]	; (8002fdc <TIM_OC4_SetConfig+0xbc>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d007      	beq.n	8002f9c <TIM_OC4_SetConfig+0x7c>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a14      	ldr	r2, [pc, #80]	; (8002fe0 <TIM_OC4_SetConfig+0xc0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d003      	beq.n	8002f9c <TIM_OC4_SetConfig+0x7c>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a13      	ldr	r2, [pc, #76]	; (8002fe4 <TIM_OC4_SetConfig+0xc4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d109      	bne.n	8002fb0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	019b      	lsls	r3, r3, #6
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	621a      	str	r2, [r3, #32]
}
 8002fca:	bf00      	nop
 8002fcc:	371c      	adds	r7, #28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40012c00 	.word	0x40012c00
 8002fdc:	40014000 	.word	0x40014000
 8002fe0:	40014400 	.word	0x40014400
 8002fe4:	40014800 	.word	0x40014800

08002fe8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800302c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	041b      	lsls	r3, r3, #16
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a15      	ldr	r2, [pc, #84]	; (8003094 <TIM_OC5_SetConfig+0xac>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00b      	beq.n	800305a <TIM_OC5_SetConfig+0x72>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a14      	ldr	r2, [pc, #80]	; (8003098 <TIM_OC5_SetConfig+0xb0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d007      	beq.n	800305a <TIM_OC5_SetConfig+0x72>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a13      	ldr	r2, [pc, #76]	; (800309c <TIM_OC5_SetConfig+0xb4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d003      	beq.n	800305a <TIM_OC5_SetConfig+0x72>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a12      	ldr	r2, [pc, #72]	; (80030a0 <TIM_OC5_SetConfig+0xb8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d109      	bne.n	800306e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003060:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	4313      	orrs	r3, r2
 800306c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	621a      	str	r2, [r3, #32]
}
 8003088:	bf00      	nop
 800308a:	371c      	adds	r7, #28
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	40012c00 	.word	0x40012c00
 8003098:	40014000 	.word	0x40014000
 800309c:	40014400 	.word	0x40014400
 80030a0:	40014800 	.word	0x40014800

080030a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	051b      	lsls	r3, r3, #20
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a16      	ldr	r2, [pc, #88]	; (8003154 <TIM_OC6_SetConfig+0xb0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00b      	beq.n	8003118 <TIM_OC6_SetConfig+0x74>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a15      	ldr	r2, [pc, #84]	; (8003158 <TIM_OC6_SetConfig+0xb4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d007      	beq.n	8003118 <TIM_OC6_SetConfig+0x74>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a14      	ldr	r2, [pc, #80]	; (800315c <TIM_OC6_SetConfig+0xb8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d003      	beq.n	8003118 <TIM_OC6_SetConfig+0x74>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a13      	ldr	r2, [pc, #76]	; (8003160 <TIM_OC6_SetConfig+0xbc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d109      	bne.n	800312c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800311e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	029b      	lsls	r3, r3, #10
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	621a      	str	r2, [r3, #32]
}
 8003146:	bf00      	nop
 8003148:	371c      	adds	r7, #28
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40012c00 	.word	0x40012c00
 8003158:	40014000 	.word	0x40014000
 800315c:	40014400 	.word	0x40014400
 8003160:	40014800 	.word	0x40014800

08003164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	f023 0201 	bic.w	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800318e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f023 030a 	bic.w	r3, r3, #10
 80031a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	621a      	str	r2, [r3, #32]
}
 80031b6:	bf00      	nop
 80031b8:	371c      	adds	r7, #28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b087      	sub	sp, #28
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	f023 0210 	bic.w	r2, r3, #16
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	031b      	lsls	r3, r3, #12
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	621a      	str	r2, [r3, #32]
}
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003222:	b480      	push	{r7}
 8003224:	b085      	sub	sp, #20
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	f043 0307 	orr.w	r3, r3, #7
 8003244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	609a      	str	r2, [r3, #8]
}
 800324c:	bf00      	nop
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	021a      	lsls	r2, r3, #8
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	431a      	orrs	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4313      	orrs	r3, r2
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	4313      	orrs	r3, r2
 8003284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	609a      	str	r2, [r3, #8]
}
 800328c:	bf00      	nop
 800328e:	371c      	adds	r7, #28
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f003 031f 	and.w	r3, r3, #31
 80032aa:	2201      	movs	r2, #1
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a1a      	ldr	r2, [r3, #32]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	43db      	mvns	r3, r3
 80032ba:	401a      	ands	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a1a      	ldr	r2, [r3, #32]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	fa01 f303 	lsl.w	r3, r1, r3
 80032d0:	431a      	orrs	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	621a      	str	r2, [r3, #32]
}
 80032d6:	bf00      	nop
 80032d8:	371c      	adds	r7, #28
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e054      	b.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a24      	ldr	r2, [pc, #144]	; (80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d108      	bne.n	8003338 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800332c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4313      	orrs	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	4313      	orrs	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a17      	ldr	r2, [pc, #92]	; (80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d00e      	beq.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003364:	d009      	beq.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a13      	ldr	r2, [pc, #76]	; (80033b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d004      	beq.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a11      	ldr	r2, [pc, #68]	; (80033bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d10c      	bne.n	8003394 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003380:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	4313      	orrs	r3, r2
 800338a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40012c00 	.word	0x40012c00
 80033b8:	40000400 	.word	0x40000400
 80033bc:	40014000 	.word	0x40014000

080033c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e040      	b.n	8003454 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fd f96e 	bl	80006c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2224      	movs	r2, #36	; 0x24
 80033ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0201 	bic.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fb78 	bl	8003af4 <UART_SetConfig>
 8003404:	4603      	mov	r3, r0
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e022      	b.n	8003454 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fca2 	bl	8003d60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800342a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800343a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fd29 	bl	8003ea4 <UART_CheckIdleState>
 8003452:	4603      	mov	r3, r0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	; 0x28
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	4613      	mov	r3, r2
 8003468:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800346e:	2b20      	cmp	r3, #32
 8003470:	d13d      	bne.n	80034ee <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_UART_Receive_IT+0x22>
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e036      	b.n	80034f0 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003488:	2b01      	cmp	r3, #1
 800348a:	d101      	bne.n	8003490 <HAL_UART_Receive_IT+0x34>
 800348c:	2302      	movs	r3, #2
 800348e:	e02f      	b.n	80034f0 <HAL_UART_Receive_IT+0x94>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d018      	beq.n	80034de <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	e853 3f00 	ldrex	r3, [r3]
 80034b8:	613b      	str	r3, [r7, #16]
   return(result);
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	623b      	str	r3, [r7, #32]
 80034cc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ce:	69f9      	ldr	r1, [r7, #28]
 80034d0:	6a3a      	ldr	r2, [r7, #32]
 80034d2:	e841 2300 	strex	r3, r2, [r1]
 80034d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1e6      	bne.n	80034ac <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	461a      	mov	r2, r3
 80034e2:	68b9      	ldr	r1, [r7, #8]
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 fdeb 	bl	80040c0 <UART_Start_Receive_IT>
 80034ea:	4603      	mov	r3, r0
 80034ec:	e000      	b.n	80034f0 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034ee:	2302      	movs	r3, #2
  }
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3728      	adds	r7, #40	; 0x28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b0ba      	sub	sp, #232	; 0xe8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800351e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003522:	f640 030f 	movw	r3, #2063	; 0x80f
 8003526:	4013      	ands	r3, r2
 8003528:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800352c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003530:	2b00      	cmp	r3, #0
 8003532:	d115      	bne.n	8003560 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00f      	beq.n	8003560 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b00      	cmp	r3, #0
 800354a:	d009      	beq.n	8003560 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 82a3 	beq.w	8003a9c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	4798      	blx	r3
      }
      return;
 800355e:	e29d      	b.n	8003a9c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003560:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 8117 	beq.w	8003798 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800356a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003576:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800357a:	4b85      	ldr	r3, [pc, #532]	; (8003790 <HAL_UART_IRQHandler+0x298>)
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 810a 	beq.w	8003798 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b00      	cmp	r3, #0
 800358e:	d011      	beq.n	80035b4 <HAL_UART_IRQHandler+0xbc>
 8003590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00b      	beq.n	80035b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2201      	movs	r2, #1
 80035a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035aa:	f043 0201 	orr.w	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d011      	beq.n	80035e4 <HAL_UART_IRQHandler+0xec>
 80035c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00b      	beq.n	80035e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2202      	movs	r2, #2
 80035d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035da:	f043 0204 	orr.w	r2, r3, #4
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d011      	beq.n	8003614 <HAL_UART_IRQHandler+0x11c>
 80035f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00b      	beq.n	8003614 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2204      	movs	r2, #4
 8003602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800360a:	f043 0202 	orr.w	r2, r3, #2
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b00      	cmp	r3, #0
 800361e:	d017      	beq.n	8003650 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003624:	f003 0320 	and.w	r3, r3, #32
 8003628:	2b00      	cmp	r3, #0
 800362a:	d105      	bne.n	8003638 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800362c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003630:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00b      	beq.n	8003650 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2208      	movs	r2, #8
 800363e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003646:	f043 0208 	orr.w	r2, r3, #8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003658:	2b00      	cmp	r3, #0
 800365a:	d012      	beq.n	8003682 <HAL_UART_IRQHandler+0x18a>
 800365c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003660:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00c      	beq.n	8003682 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003670:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003678:	f043 0220 	orr.w	r2, r3, #32
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 8209 	beq.w	8003aa0 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800368e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00d      	beq.n	80036b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800369a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d007      	beq.n	80036b6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ca:	2b40      	cmp	r3, #64	; 0x40
 80036cc:	d005      	beq.n	80036da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80036ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d04f      	beq.n	800377a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fd9c 	bl	8004218 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ea:	2b40      	cmp	r3, #64	; 0x40
 80036ec:	d141      	bne.n	8003772 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3308      	adds	r3, #8
 80036f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003704:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800370c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3308      	adds	r3, #8
 8003716:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800371a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800371e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003722:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003726:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800372a:	e841 2300 	strex	r3, r2, [r1]
 800372e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1d9      	bne.n	80036ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	2b00      	cmp	r3, #0
 8003740:	d013      	beq.n	800376a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	4a13      	ldr	r2, [pc, #76]	; (8003794 <HAL_UART_IRQHandler+0x29c>)
 8003748:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374e:	4618      	mov	r0, r3
 8003750:	f7fd fa24 	bl	8000b9c <HAL_DMA_Abort_IT>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d017      	beq.n	800378a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003764:	4610      	mov	r0, r2
 8003766:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003768:	e00f      	b.n	800378a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f9ac 	bl	8003ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003770:	e00b      	b.n	800378a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f9a8 	bl	8003ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003778:	e007      	b.n	800378a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f9a4 	bl	8003ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003788:	e18a      	b.n	8003aa0 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800378a:	bf00      	nop
    return;
 800378c:	e188      	b.n	8003aa0 <HAL_UART_IRQHandler+0x5a8>
 800378e:	bf00      	nop
 8003790:	04000120 	.word	0x04000120
 8003794:	080042df 	.word	0x080042df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800379c:	2b01      	cmp	r3, #1
 800379e:	f040 8143 	bne.w	8003a28 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80037a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 813c 	beq.w	8003a28 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80037b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 8135 	beq.w	8003a28 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2210      	movs	r2, #16
 80037c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d0:	2b40      	cmp	r3, #64	; 0x40
 80037d2:	f040 80b1 	bne.w	8003938 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 815c 	beq.w	8003aa4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80037f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037f6:	429a      	cmp	r2, r3
 80037f8:	f080 8154 	bcs.w	8003aa4 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003802:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	2b20      	cmp	r3, #32
 800380e:	f000 8085 	beq.w	800391c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800381e:	e853 3f00 	ldrex	r3, [r3]
 8003822:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003826:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800382a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800382e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800383c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003840:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003844:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003848:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003854:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1da      	bne.n	8003812 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3308      	adds	r3, #8
 8003862:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003866:	e853 3f00 	ldrex	r3, [r3]
 800386a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800386c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3308      	adds	r3, #8
 800387c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003880:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003884:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003886:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003888:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800388c:	e841 2300 	strex	r3, r2, [r1]
 8003890:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003892:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e1      	bne.n	800385c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3308      	adds	r3, #8
 800389e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038a2:	e853 3f00 	ldrex	r3, [r3]
 80038a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3308      	adds	r3, #8
 80038b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038c4:	e841 2300 	strex	r3, r2, [r1]
 80038c8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e3      	bne.n	8003898 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e4:	e853 3f00 	ldrex	r3, [r3]
 80038e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ec:	f023 0310 	bic.w	r3, r3, #16
 80038f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	461a      	mov	r2, r3
 80038fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8003900:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003902:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003904:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003906:	e841 2300 	strex	r3, r2, [r1]
 800390a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800390c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1e4      	bne.n	80038dc <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	4618      	mov	r0, r3
 8003918:	f7fd f907 	bl	8000b2a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003928:	b29b      	uxth	r3, r3
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	b29b      	uxth	r3, r3
 800392e:	4619      	mov	r1, r3
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f8d3 	bl	8003adc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003936:	e0b5      	b.n	8003aa4 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003944:	b29b      	uxth	r3, r3
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80a7 	beq.w	8003aa8 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800395a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80a2 	beq.w	8003aa8 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396c:	e853 3f00 	ldrex	r3, [r3]
 8003970:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003974:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003978:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003986:	647b      	str	r3, [r7, #68]	; 0x44
 8003988:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800398c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e4      	bne.n	8003964 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3308      	adds	r3, #8
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	e853 3f00 	ldrex	r3, [r3]
 80039a8:	623b      	str	r3, [r7, #32]
   return(result);
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	f023 0301 	bic.w	r3, r3, #1
 80039b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3308      	adds	r3, #8
 80039ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039be:	633a      	str	r2, [r7, #48]	; 0x30
 80039c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c6:	e841 2300 	strex	r3, r2, [r1]
 80039ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1e3      	bne.n	800399a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2220      	movs	r2, #32
 80039d6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	e853 3f00 	ldrex	r3, [r3]
 80039f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f023 0310 	bic.w	r3, r3, #16
 80039f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	461a      	mov	r2, r3
 8003a02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a06:	61fb      	str	r3, [r7, #28]
 8003a08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0a:	69b9      	ldr	r1, [r7, #24]
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	e841 2300 	strex	r3, r2, [r1]
 8003a12:	617b      	str	r3, [r7, #20]
   return(result);
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1e4      	bne.n	80039e4 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a1e:	4619      	mov	r1, r3
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f85b 	bl	8003adc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a26:	e03f      	b.n	8003aa8 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00e      	beq.n	8003a52 <HAL_UART_IRQHandler+0x55a>
 8003a34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fde3 	bl	8004616 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a50:	e02d      	b.n	8003aae <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00e      	beq.n	8003a7c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d01c      	beq.n	8003aac <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	4798      	blx	r3
    }
    return;
 8003a7a:	e017      	b.n	8003aac <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d012      	beq.n	8003aae <HAL_UART_IRQHandler+0x5b6>
 8003a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00c      	beq.n	8003aae <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 fc38 	bl	800430a <UART_EndTransmit_IT>
    return;
 8003a9a:	e008      	b.n	8003aae <HAL_UART_IRQHandler+0x5b6>
      return;
 8003a9c:	bf00      	nop
 8003a9e:	e006      	b.n	8003aae <HAL_UART_IRQHandler+0x5b6>
    return;
 8003aa0:	bf00      	nop
 8003aa2:	e004      	b.n	8003aae <HAL_UART_IRQHandler+0x5b6>
      return;
 8003aa4:	bf00      	nop
 8003aa6:	e002      	b.n	8003aae <HAL_UART_IRQHandler+0x5b6>
      return;
 8003aa8:	bf00      	nop
 8003aaa:	e000      	b.n	8003aae <HAL_UART_IRQHandler+0x5b6>
    return;
 8003aac:	bf00      	nop
  }

}
 8003aae:	37e8      	adds	r7, #232	; 0xe8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4b8a      	ldr	r3, [pc, #552]	; (8003d48 <UART_SetConfig+0x254>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6812      	ldr	r2, [r2, #0]
 8003b26:	6979      	ldr	r1, [r7, #20]
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a78      	ldr	r2, [pc, #480]	; (8003d4c <UART_SetConfig+0x258>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d120      	bne.n	8003bb2 <UART_SetConfig+0xbe>
 8003b70:	4b77      	ldr	r3, [pc, #476]	; (8003d50 <UART_SetConfig+0x25c>)
 8003b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b74:	f003 0303 	and.w	r3, r3, #3
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d817      	bhi.n	8003bac <UART_SetConfig+0xb8>
 8003b7c:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <UART_SetConfig+0x90>)
 8003b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b82:	bf00      	nop
 8003b84:	08003b95 	.word	0x08003b95
 8003b88:	08003ba1 	.word	0x08003ba1
 8003b8c:	08003ba7 	.word	0x08003ba7
 8003b90:	08003b9b 	.word	0x08003b9b
 8003b94:	2300      	movs	r3, #0
 8003b96:	77fb      	strb	r3, [r7, #31]
 8003b98:	e01d      	b.n	8003bd6 <UART_SetConfig+0xe2>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	77fb      	strb	r3, [r7, #31]
 8003b9e:	e01a      	b.n	8003bd6 <UART_SetConfig+0xe2>
 8003ba0:	2304      	movs	r3, #4
 8003ba2:	77fb      	strb	r3, [r7, #31]
 8003ba4:	e017      	b.n	8003bd6 <UART_SetConfig+0xe2>
 8003ba6:	2308      	movs	r3, #8
 8003ba8:	77fb      	strb	r3, [r7, #31]
 8003baa:	e014      	b.n	8003bd6 <UART_SetConfig+0xe2>
 8003bac:	2310      	movs	r3, #16
 8003bae:	77fb      	strb	r3, [r7, #31]
 8003bb0:	e011      	b.n	8003bd6 <UART_SetConfig+0xe2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a67      	ldr	r2, [pc, #412]	; (8003d54 <UART_SetConfig+0x260>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d102      	bne.n	8003bc2 <UART_SetConfig+0xce>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	77fb      	strb	r3, [r7, #31]
 8003bc0:	e009      	b.n	8003bd6 <UART_SetConfig+0xe2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a64      	ldr	r2, [pc, #400]	; (8003d58 <UART_SetConfig+0x264>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d102      	bne.n	8003bd2 <UART_SetConfig+0xde>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	77fb      	strb	r3, [r7, #31]
 8003bd0:	e001      	b.n	8003bd6 <UART_SetConfig+0xe2>
 8003bd2:	2310      	movs	r3, #16
 8003bd4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bde:	d15b      	bne.n	8003c98 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003be0:	7ffb      	ldrb	r3, [r7, #31]
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d827      	bhi.n	8003c36 <UART_SetConfig+0x142>
 8003be6:	a201      	add	r2, pc, #4	; (adr r2, 8003bec <UART_SetConfig+0xf8>)
 8003be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bec:	08003c11 	.word	0x08003c11
 8003bf0:	08003c19 	.word	0x08003c19
 8003bf4:	08003c21 	.word	0x08003c21
 8003bf8:	08003c37 	.word	0x08003c37
 8003bfc:	08003c27 	.word	0x08003c27
 8003c00:	08003c37 	.word	0x08003c37
 8003c04:	08003c37 	.word	0x08003c37
 8003c08:	08003c37 	.word	0x08003c37
 8003c0c:	08003c2f 	.word	0x08003c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c10:	f7fe fa9e 	bl	8002150 <HAL_RCC_GetPCLK1Freq>
 8003c14:	61b8      	str	r0, [r7, #24]
        break;
 8003c16:	e013      	b.n	8003c40 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c18:	f7fe fabc 	bl	8002194 <HAL_RCC_GetPCLK2Freq>
 8003c1c:	61b8      	str	r0, [r7, #24]
        break;
 8003c1e:	e00f      	b.n	8003c40 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c20:	4b4e      	ldr	r3, [pc, #312]	; (8003d5c <UART_SetConfig+0x268>)
 8003c22:	61bb      	str	r3, [r7, #24]
        break;
 8003c24:	e00c      	b.n	8003c40 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c26:	f7fe fa1d 	bl	8002064 <HAL_RCC_GetSysClockFreq>
 8003c2a:	61b8      	str	r0, [r7, #24]
        break;
 8003c2c:	e008      	b.n	8003c40 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c32:	61bb      	str	r3, [r7, #24]
        break;
 8003c34:	e004      	b.n	8003c40 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	77bb      	strb	r3, [r7, #30]
        break;
 8003c3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d074      	beq.n	8003d30 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	005a      	lsls	r2, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	085b      	lsrs	r3, r3, #1
 8003c50:	441a      	add	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	2b0f      	cmp	r3, #15
 8003c62:	d916      	bls.n	8003c92 <UART_SetConfig+0x19e>
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6a:	d212      	bcs.n	8003c92 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	f023 030f 	bic.w	r3, r3, #15
 8003c74:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	085b      	lsrs	r3, r3, #1
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	89fb      	ldrh	r3, [r7, #14]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	89fa      	ldrh	r2, [r7, #14]
 8003c8e:	60da      	str	r2, [r3, #12]
 8003c90:	e04e      	b.n	8003d30 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	77bb      	strb	r3, [r7, #30]
 8003c96:	e04b      	b.n	8003d30 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c98:	7ffb      	ldrb	r3, [r7, #31]
 8003c9a:	2b08      	cmp	r3, #8
 8003c9c:	d827      	bhi.n	8003cee <UART_SetConfig+0x1fa>
 8003c9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <UART_SetConfig+0x1b0>)
 8003ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca4:	08003cc9 	.word	0x08003cc9
 8003ca8:	08003cd1 	.word	0x08003cd1
 8003cac:	08003cd9 	.word	0x08003cd9
 8003cb0:	08003cef 	.word	0x08003cef
 8003cb4:	08003cdf 	.word	0x08003cdf
 8003cb8:	08003cef 	.word	0x08003cef
 8003cbc:	08003cef 	.word	0x08003cef
 8003cc0:	08003cef 	.word	0x08003cef
 8003cc4:	08003ce7 	.word	0x08003ce7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cc8:	f7fe fa42 	bl	8002150 <HAL_RCC_GetPCLK1Freq>
 8003ccc:	61b8      	str	r0, [r7, #24]
        break;
 8003cce:	e013      	b.n	8003cf8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cd0:	f7fe fa60 	bl	8002194 <HAL_RCC_GetPCLK2Freq>
 8003cd4:	61b8      	str	r0, [r7, #24]
        break;
 8003cd6:	e00f      	b.n	8003cf8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cd8:	4b20      	ldr	r3, [pc, #128]	; (8003d5c <UART_SetConfig+0x268>)
 8003cda:	61bb      	str	r3, [r7, #24]
        break;
 8003cdc:	e00c      	b.n	8003cf8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cde:	f7fe f9c1 	bl	8002064 <HAL_RCC_GetSysClockFreq>
 8003ce2:	61b8      	str	r0, [r7, #24]
        break;
 8003ce4:	e008      	b.n	8003cf8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cea:	61bb      	str	r3, [r7, #24]
        break;
 8003cec:	e004      	b.n	8003cf8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	77bb      	strb	r3, [r7, #30]
        break;
 8003cf6:	bf00      	nop
    }

    if (pclk != 0U)
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d018      	beq.n	8003d30 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	085a      	lsrs	r2, r3, #1
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	441a      	add	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	2b0f      	cmp	r3, #15
 8003d18:	d908      	bls.n	8003d2c <UART_SetConfig+0x238>
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d20:	d204      	bcs.n	8003d2c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	60da      	str	r2, [r3, #12]
 8003d2a:	e001      	b.n	8003d30 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3720      	adds	r7, #32
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	efff69f3 	.word	0xefff69f3
 8003d4c:	40013800 	.word	0x40013800
 8003d50:	40021000 	.word	0x40021000
 8003d54:	40004400 	.word	0x40004400
 8003d58:	40004800 	.word	0x40004800
 8003d5c:	007a1200 	.word	0x007a1200

08003d60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01a      	beq.n	8003e76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e5e:	d10a      	bne.n	8003e76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	605a      	str	r2, [r3, #4]
  }
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af02      	add	r7, sp, #8
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003eb4:	f7fc fd1c 	bl	80008f0 <HAL_GetTick>
 8003eb8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d10e      	bne.n	8003ee6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ec8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f82d 	bl	8003f36 <UART_WaitOnFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e023      	b.n	8003f2e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d10e      	bne.n	8003f12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ef4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f817 	bl	8003f36 <UART_WaitOnFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e00d      	b.n	8003f2e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b09c      	sub	sp, #112	; 0x70
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	603b      	str	r3, [r7, #0]
 8003f42:	4613      	mov	r3, r2
 8003f44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f46:	e0a5      	b.n	8004094 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4e:	f000 80a1 	beq.w	8004094 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f52:	f7fc fccd 	bl	80008f0 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d302      	bcc.n	8003f68 <UART_WaitOnFlagUntilTimeout+0x32>
 8003f62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d13e      	bne.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f70:	e853 3f00 	ldrex	r3, [r3]
 8003f74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f7c:	667b      	str	r3, [r7, #100]	; 0x64
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f88:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f8e:	e841 2300 	strex	r3, r2, [r1]
 8003f92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1e6      	bne.n	8003f68 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	3308      	adds	r3, #8
 8003fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa4:	e853 3f00 	ldrex	r3, [r3]
 8003fa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fac:	f023 0301 	bic.w	r3, r3, #1
 8003fb0:	663b      	str	r3, [r7, #96]	; 0x60
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fba:	64ba      	str	r2, [r7, #72]	; 0x48
 8003fbc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003fc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fc2:	e841 2300 	strex	r3, r2, [r1]
 8003fc6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1e5      	bne.n	8003f9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e067      	b.n	80040b6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d04f      	beq.n	8004094 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004002:	d147      	bne.n	8004094 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800400c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	e853 3f00 	ldrex	r3, [r3]
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004022:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	461a      	mov	r2, r3
 800402a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402c:	637b      	str	r3, [r7, #52]	; 0x34
 800402e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004030:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004034:	e841 2300 	strex	r3, r2, [r1]
 8004038:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800403a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1e6      	bne.n	800400e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3308      	adds	r3, #8
 8004046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	e853 3f00 	ldrex	r3, [r3]
 800404e:	613b      	str	r3, [r7, #16]
   return(result);
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f023 0301 	bic.w	r3, r3, #1
 8004056:	66bb      	str	r3, [r7, #104]	; 0x68
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3308      	adds	r3, #8
 800405e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004060:	623a      	str	r2, [r7, #32]
 8004062:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004064:	69f9      	ldr	r1, [r7, #28]
 8004066:	6a3a      	ldr	r2, [r7, #32]
 8004068:	e841 2300 	strex	r3, r2, [r1]
 800406c:	61bb      	str	r3, [r7, #24]
   return(result);
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e5      	bne.n	8004040 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2220      	movs	r2, #32
 8004084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e010      	b.n	80040b6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69da      	ldr	r2, [r3, #28]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	4013      	ands	r3, r2
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	461a      	mov	r2, r3
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	f43f af4a 	beq.w	8003f48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3770      	adds	r7, #112	; 0x70
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b091      	sub	sp, #68	; 0x44
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	4613      	mov	r3, r2
 80040cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	88fa      	ldrh	r2, [r7, #6]
 80040d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	88fa      	ldrh	r2, [r7, #6]
 80040e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f2:	d10e      	bne.n	8004112 <UART_Start_Receive_IT+0x52>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d105      	bne.n	8004108 <UART_Start_Receive_IT+0x48>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004102:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004106:	e02d      	b.n	8004164 <UART_Start_Receive_IT+0xa4>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	22ff      	movs	r2, #255	; 0xff
 800410c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004110:	e028      	b.n	8004164 <UART_Start_Receive_IT+0xa4>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10d      	bne.n	8004136 <UART_Start_Receive_IT+0x76>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d104      	bne.n	800412c <UART_Start_Receive_IT+0x6c>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	22ff      	movs	r2, #255	; 0xff
 8004126:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800412a:	e01b      	b.n	8004164 <UART_Start_Receive_IT+0xa4>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	227f      	movs	r2, #127	; 0x7f
 8004130:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004134:	e016      	b.n	8004164 <UART_Start_Receive_IT+0xa4>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800413e:	d10d      	bne.n	800415c <UART_Start_Receive_IT+0x9c>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d104      	bne.n	8004152 <UART_Start_Receive_IT+0x92>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	227f      	movs	r2, #127	; 0x7f
 800414c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004150:	e008      	b.n	8004164 <UART_Start_Receive_IT+0xa4>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	223f      	movs	r2, #63	; 0x3f
 8004156:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800415a:	e003      	b.n	8004164 <UART_Start_Receive_IT+0xa4>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2222      	movs	r2, #34	; 0x22
 8004170:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3308      	adds	r3, #8
 8004178:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417c:	e853 3f00 	ldrex	r3, [r3]
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	f043 0301 	orr.w	r3, r3, #1
 8004188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3308      	adds	r3, #8
 8004190:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004192:	637a      	str	r2, [r7, #52]	; 0x34
 8004194:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004196:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004198:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800419a:	e841 2300 	strex	r3, r2, [r1]
 800419e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1e5      	bne.n	8004172 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ae:	d107      	bne.n	80041c0 <UART_Start_Receive_IT+0x100>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d103      	bne.n	80041c0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4a15      	ldr	r2, [pc, #84]	; (8004210 <UART_Start_Receive_IT+0x150>)
 80041bc:	665a      	str	r2, [r3, #100]	; 0x64
 80041be:	e002      	b.n	80041c6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4a14      	ldr	r2, [pc, #80]	; (8004214 <UART_Start_Receive_IT+0x154>)
 80041c4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	613b      	str	r3, [r7, #16]
   return(result);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80041e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	461a      	mov	r2, r3
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	623b      	str	r3, [r7, #32]
 80041ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	69f9      	ldr	r1, [r7, #28]
 80041f2:	6a3a      	ldr	r2, [r7, #32]
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e6      	bne.n	80041ce <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3744      	adds	r7, #68	; 0x44
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	080044bb 	.word	0x080044bb
 8004214:	0800435f 	.word	0x0800435f

08004218 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004218:	b480      	push	{r7}
 800421a:	b095      	sub	sp, #84	; 0x54
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004228:	e853 3f00 	ldrex	r3, [r3]
 800422c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800422e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004230:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004234:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800423e:	643b      	str	r3, [r7, #64]	; 0x40
 8004240:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004242:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004244:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004246:	e841 2300 	strex	r3, r2, [r1]
 800424a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800424c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1e6      	bne.n	8004220 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3308      	adds	r3, #8
 8004258:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	e853 3f00 	ldrex	r3, [r3]
 8004260:	61fb      	str	r3, [r7, #28]
   return(result);
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	f023 0301 	bic.w	r3, r3, #1
 8004268:	64bb      	str	r3, [r7, #72]	; 0x48
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	3308      	adds	r3, #8
 8004270:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004272:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004274:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800427a:	e841 2300 	strex	r3, r2, [r1]
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1e5      	bne.n	8004252 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800428a:	2b01      	cmp	r3, #1
 800428c:	d118      	bne.n	80042c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	e853 3f00 	ldrex	r3, [r3]
 800429a:	60bb      	str	r3, [r7, #8]
   return(result);
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f023 0310 	bic.w	r3, r3, #16
 80042a2:	647b      	str	r3, [r7, #68]	; 0x44
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ac:	61bb      	str	r3, [r7, #24]
 80042ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b0:	6979      	ldr	r1, [r7, #20]
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	e841 2300 	strex	r3, r2, [r1]
 80042b8:	613b      	str	r3, [r7, #16]
   return(result);
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1e6      	bne.n	800428e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2220      	movs	r2, #32
 80042c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80042d2:	bf00      	nop
 80042d4:	3754      	adds	r7, #84	; 0x54
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b084      	sub	sp, #16
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f7ff fbe3 	bl	8003ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004302:	bf00      	nop
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b088      	sub	sp, #32
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004326:	61fb      	str	r3, [r7, #28]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	61bb      	str	r3, [r7, #24]
 8004332:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6979      	ldr	r1, [r7, #20]
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	613b      	str	r3, [r7, #16]
   return(result);
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e6      	bne.n	8004312 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff fbaf 	bl	8003ab4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004356:	bf00      	nop
 8004358:	3720      	adds	r7, #32
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b096      	sub	sp, #88	; 0x58
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800436c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004374:	2b22      	cmp	r3, #34	; 0x22
 8004376:	f040 8094 	bne.w	80044a2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004380:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004384:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004388:	b2d9      	uxtb	r1, r3
 800438a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800438e:	b2da      	uxtb	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004394:	400a      	ands	r2, r1
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d177      	bne.n	80044b2 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043d6:	653b      	str	r3, [r7, #80]	; 0x50
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e0:	647b      	str	r3, [r7, #68]	; 0x44
 80043e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043e8:	e841 2300 	strex	r3, r2, [r1]
 80043ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e6      	bne.n	80043c2 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3308      	adds	r3, #8
 80043fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	623b      	str	r3, [r7, #32]
   return(result);
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3308      	adds	r3, #8
 8004412:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004414:	633a      	str	r2, [r7, #48]	; 0x30
 8004416:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800441a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800441c:	e841 2300 	strex	r3, r2, [r1]
 8004420:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e5      	bne.n	80043f4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2220      	movs	r2, #32
 800442c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004438:	2b01      	cmp	r3, #1
 800443a:	d12e      	bne.n	800449a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0310 	bic.w	r3, r3, #16
 8004456:	64bb      	str	r3, [r7, #72]	; 0x48
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004460:	61fb      	str	r3, [r7, #28]
 8004462:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004464:	69b9      	ldr	r1, [r7, #24]
 8004466:	69fa      	ldr	r2, [r7, #28]
 8004468:	e841 2300 	strex	r3, r2, [r1]
 800446c:	617b      	str	r3, [r7, #20]
   return(result);
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1e6      	bne.n	8004442 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b10      	cmp	r3, #16
 8004480:	d103      	bne.n	800448a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2210      	movs	r2, #16
 8004488:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004490:	4619      	mov	r1, r3
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff fb22 	bl	8003adc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004498:	e00b      	b.n	80044b2 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fc f824 	bl	80004e8 <HAL_UART_RxCpltCallback>
}
 80044a0:	e007      	b.n	80044b2 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	699a      	ldr	r2, [r3, #24]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f042 0208 	orr.w	r2, r2, #8
 80044b0:	619a      	str	r2, [r3, #24]
}
 80044b2:	bf00      	nop
 80044b4:	3758      	adds	r7, #88	; 0x58
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b096      	sub	sp, #88	; 0x58
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80044c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044d0:	2b22      	cmp	r3, #34	; 0x22
 80044d2:	f040 8094 	bne.w	80045fe <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80044dc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80044e6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80044ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80044ee:	4013      	ands	r3, r2
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fa:	1c9a      	adds	r2, r3, #2
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d177      	bne.n	800460e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004526:	e853 3f00 	ldrex	r3, [r3]
 800452a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	461a      	mov	r2, r3
 800453a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800453c:	643b      	str	r3, [r7, #64]	; 0x40
 800453e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004540:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004542:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004544:	e841 2300 	strex	r3, r2, [r1]
 8004548:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800454a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1e6      	bne.n	800451e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3308      	adds	r3, #8
 8004556:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	e853 3f00 	ldrex	r3, [r3]
 800455e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f023 0301 	bic.w	r3, r3, #1
 8004566:	64bb      	str	r3, [r7, #72]	; 0x48
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3308      	adds	r3, #8
 800456e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004570:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004572:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004578:	e841 2300 	strex	r3, r2, [r1]
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e5      	bne.n	8004550 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004594:	2b01      	cmp	r3, #1
 8004596:	d12e      	bne.n	80045f6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	e853 3f00 	ldrex	r3, [r3]
 80045aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f023 0310 	bic.w	r3, r3, #16
 80045b2:	647b      	str	r3, [r7, #68]	; 0x44
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045bc:	61bb      	str	r3, [r7, #24]
 80045be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c0:	6979      	ldr	r1, [r7, #20]
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	e841 2300 	strex	r3, r2, [r1]
 80045c8:	613b      	str	r3, [r7, #16]
   return(result);
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e6      	bne.n	800459e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	f003 0310 	and.w	r3, r3, #16
 80045da:	2b10      	cmp	r3, #16
 80045dc:	d103      	bne.n	80045e6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2210      	movs	r2, #16
 80045e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80045ec:	4619      	mov	r1, r3
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7ff fa74 	bl	8003adc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045f4:	e00b      	b.n	800460e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fb ff76 	bl	80004e8 <HAL_UART_RxCpltCallback>
}
 80045fc:	e007      	b.n	800460e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699a      	ldr	r2, [r3, #24]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f042 0208 	orr.w	r2, r2, #8
 800460c:	619a      	str	r2, [r3, #24]
}
 800460e:	bf00      	nop
 8004610:	3758      	adds	r7, #88	; 0x58
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
	...

0800462c <__libc_init_array>:
 800462c:	b570      	push	{r4, r5, r6, lr}
 800462e:	4d0d      	ldr	r5, [pc, #52]	; (8004664 <__libc_init_array+0x38>)
 8004630:	4c0d      	ldr	r4, [pc, #52]	; (8004668 <__libc_init_array+0x3c>)
 8004632:	1b64      	subs	r4, r4, r5
 8004634:	10a4      	asrs	r4, r4, #2
 8004636:	2600      	movs	r6, #0
 8004638:	42a6      	cmp	r6, r4
 800463a:	d109      	bne.n	8004650 <__libc_init_array+0x24>
 800463c:	4d0b      	ldr	r5, [pc, #44]	; (800466c <__libc_init_array+0x40>)
 800463e:	4c0c      	ldr	r4, [pc, #48]	; (8004670 <__libc_init_array+0x44>)
 8004640:	f000 f838 	bl	80046b4 <_init>
 8004644:	1b64      	subs	r4, r4, r5
 8004646:	10a4      	asrs	r4, r4, #2
 8004648:	2600      	movs	r6, #0
 800464a:	42a6      	cmp	r6, r4
 800464c:	d105      	bne.n	800465a <__libc_init_array+0x2e>
 800464e:	bd70      	pop	{r4, r5, r6, pc}
 8004650:	f855 3b04 	ldr.w	r3, [r5], #4
 8004654:	4798      	blx	r3
 8004656:	3601      	adds	r6, #1
 8004658:	e7ee      	b.n	8004638 <__libc_init_array+0xc>
 800465a:	f855 3b04 	ldr.w	r3, [r5], #4
 800465e:	4798      	blx	r3
 8004660:	3601      	adds	r6, #1
 8004662:	e7f2      	b.n	800464a <__libc_init_array+0x1e>
 8004664:	0800470c 	.word	0x0800470c
 8004668:	0800470c 	.word	0x0800470c
 800466c:	0800470c 	.word	0x0800470c
 8004670:	08004710 	.word	0x08004710

08004674 <memset>:
 8004674:	4402      	add	r2, r0
 8004676:	4603      	mov	r3, r0
 8004678:	4293      	cmp	r3, r2
 800467a:	d100      	bne.n	800467e <memset+0xa>
 800467c:	4770      	bx	lr
 800467e:	f803 1b01 	strb.w	r1, [r3], #1
 8004682:	e7f9      	b.n	8004678 <memset+0x4>

08004684 <strstr>:
 8004684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004686:	780c      	ldrb	r4, [r1, #0]
 8004688:	b164      	cbz	r4, 80046a4 <strstr+0x20>
 800468a:	4603      	mov	r3, r0
 800468c:	781a      	ldrb	r2, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	1c5e      	adds	r6, r3, #1
 8004692:	b90a      	cbnz	r2, 8004698 <strstr+0x14>
 8004694:	4610      	mov	r0, r2
 8004696:	e005      	b.n	80046a4 <strstr+0x20>
 8004698:	4294      	cmp	r4, r2
 800469a:	d108      	bne.n	80046ae <strstr+0x2a>
 800469c:	460d      	mov	r5, r1
 800469e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80046a2:	b902      	cbnz	r2, 80046a6 <strstr+0x22>
 80046a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046a6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80046aa:	4297      	cmp	r7, r2
 80046ac:	d0f7      	beq.n	800469e <strstr+0x1a>
 80046ae:	4633      	mov	r3, r6
 80046b0:	e7ec      	b.n	800468c <strstr+0x8>
	...

080046b4 <_init>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	bf00      	nop
 80046b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ba:	bc08      	pop	{r3}
 80046bc:	469e      	mov	lr, r3
 80046be:	4770      	bx	lr

080046c0 <_fini>:
 80046c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c2:	bf00      	nop
 80046c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c6:	bc08      	pop	{r3}
 80046c8:	469e      	mov	lr, r3
 80046ca:	4770      	bx	lr
